[
{
	"uri": "https://tang979.github.io/Aetheric/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Create DynamoDB Table and Configure Required Permissions",
	"tags": [],
	"description": "",
	"content": "Step 1: Create a DynamoDB Table Go to the DynamoDB Console. Click Create table. Enter your desired table name in the Table name field. Specify a Partition key – this will serve as your table\u0026rsquo;s primary key. You can also select the data type next to it. Click Create table to finish. Step 2: Configure Cognito Identity Pool Go to the Cognito Console. Select Identity pools. Click Create identity pool. Choose Authenticated access, then select the login method(s) you\u0026rsquo;ve set up in User pools, then click Next. Set the IAM role name and click Next. Choose the User Pool ID and App Client ID you want to associate for authentication, then click Next. Give your Identity pool a name, review your configuration, then click Create identity pool. Step 3: Create an IAM Policy to Grant Cognito Access to DynamoDB Go to the IAM Policies Console. Click Create policy. Switch to the JSON tab and update it as follows: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:GetItem\u0026#34;, \u0026#34;dynamodb:PutItem\u0026#34;, \u0026#34;dynamodb:UpdateItem\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:[Region]:*:table/[Table Name]\u0026#34; } ] } Click Next, name the policy, and choose Create policy. Step 4: Attach Policy to Cognito Role and Edit Trust Policy Go to the IAM Console. Click Roles from the left menu and find the IAM role created with your Identity Pool. Click Add permissions → Attach policies. Search and select the policy you just created → Add permissions. Go to the Trust relationships tab → click Edit trust policy. Replace the trust policy with: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Federated\u0026#34;: \u0026#34;cognito-identity.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:aud\u0026#34;: \u0026#34;[Identity pool ID]\u0026#34; }, \u0026#34;ForAnyValue:StringLike\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:amr\u0026#34;: \u0026#34;authenticated\u0026#34; } } } ] } "
},
{
	"uri": "https://tang979.github.io/Aetheric/2-prerequiste-copy/2.1-createuserpool/",
	"title": "Create User Pool",
	"tags": [],
	"description": "",
	"content": " Open the Amazon Cognito console\nSelect User pools from the left-hand menu. Click Create user pool.\nOn the Set up resources for your application page\nUnder Define your application, select Mobile app Under Configure options, select Email, Username\nUnder Required attributes for sign-up, select Email Finally, click Create User Directory\nReturn to the Amazon Cognito console, and click on the newly created user pool.\nIn the left menu, under Application, click App client.\nUnder App clients and analytics, click on the newly created app client name.\nIn the App client section, click Edit. In the Edit app client information section, enable the following options:\nChoice-based sign-in: ALLOW_USER_AUTH Sign in with username and password: ALLOW_USER_PASSWORD_AUTH Get new user tokens from existing authenticated sessions: ALLOW_REFRESH_TOKEN_AUTH\nThen scroll to the bottom and click Save Changes.\nThat completes the process of creating a User Pool.\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "The project titled \u0026ldquo;Modernizing Mobile Game Backend with AWS Cloud Services\u0026rdquo; focuses on building a practical backend architecture for a mobile game developed with Unity 6. The architecture follows a serverless, cloud-native model, eliminating the need for traditional servers and leveraging AWS services that automatically scale and charge based on actual usage.\nAdvantages of the Solution Advantage Description Low Cost No need to rent EC2 servers; all services are serverless, reducing operational costs during low traffic Auto-scaling Lambda, DynamoDB, and API Gateway scale automatically based on demand without manual intervention Native Unity Integration Uses UnityWebRequest for communication; no SDK needed, giving developers full control over request/response Strong Security Authentication via JWT (Amazon Cognito), access controlled by IAM using the Least Privilege principle Easy to Test \u0026amp; Debug API endpoints can be tested using Postman before integrating with Unity; centralized logs via CloudWatch Limitations and Challenges Limitation / Challenge Description No official SDK for Unity 6 Requires manually signing requests using AWS Signature V4 or handling JWT authentication manually Steep learning curve for IAM Misconfigurations can easily break access or cause security risks if IAM permissions are not well understood Difficult to emulate offline Since most components depend on live AWS services, simulating the full backend offline is challenging Potential cost growth at scale While initially cost-effective, large-scale user bases require architecture reviews to optimize costs and performance Who is this for? Game developers looking to learn and apply real-world cloud architecture tailored for mobile games. Student teams building a fast MVP without maintaining server infrastructure. AWS learners seeking an end-to-end, practical use case involving Lambda, Cognito, API Gateway, and DynamoDB. "
},
{
	"uri": "https://tang979.github.io/Aetheric/1-introduce/1.1-introduce-services/",
	"title": "Introduction to AWS Services Used",
	"tags": [],
	"description": "",
	"content": "Amazon Cognito Service Amazon Cognito is an AWS service that helps manage and authenticate users securely without the need to build your own registration, login, or password management system. Cognito supports login via email, phone number, social logins (Google, Facebook, Apple), or enterprise accounts using SAML. It issues OAuth2-compliant security tokens that can be used to access backend services.\nCognito allows centralized user management via IAM, supports multi-factor authentication (MFA), fine-grained role-based access control, and provides virtually unlimited scalability. It also logs sign-in activities and errors to enhance traceability and security.\nKey benefits of using Amazon Cognito include:\nNo need to implement your own login, password reset, or email verification systems. Supports multiple login methods: email, social accounts, and enterprise identity providers. Centralized user management with IAM integration and clear role separation. Easy integration with API Gateway, Lambda, DynamoDB, S3, and more. Logs user activity to increase system visibility and security. Automatically scales with no server infrastructure management. With these advantages, Cognito eliminates the need for bastion hosts or custom session management, saving time and infrastructure cost when building user authentication for your backend.\nAmazon SES (Simple Email Service) Amazon SES is AWS’s scalable and secure email-sending service that allows you to automatically send emails from your app or game without hosting your own mail server. It supports use cases such as email confirmation, password reset, and user feedback — all with high deliverability and robust security.\nYou can configure SES to send email from a custom sender address (e.g., support@yourgame.com) and integrate authentication mechanisms like SPF and DKIM to prevent spam flags. It also works seamlessly with Lambda or API Gateway, so clients like Unity can trigger emails securely without exposing sensitive credentials.\nKey benefits of using Amazon SES include:\nSend automated email confirmations, password resets, or feedback responses. No need to set up or maintain your own mail infrastructure. Easily integrates with services like Lambda, API Gateway, and S3. Supports domain authentication (SPF, DKIM) for improved email trust. Monitor delivery rates, bounce rates, and spam reports. Low cost, with thousands of free emails per month within AWS Free Tier. With these benefits, Amazon SES is a secure, reliable, and cost-effective solution for implementing in-game email delivery features without worrying about backend complexity.\nAmazon DynamoDB Service Amazon DynamoDB is AWS’s fully managed NoSQL database service that allows you to store and retrieve data quickly and flexibly without managing any server infrastructure. With DynamoDB, you can easily store data like player accounts, scores, game progress, inventory, or tower upgrade information.\nDynamoDB operates as a key-value and document database that delivers millisecond latency even at high scale — supporting millions of concurrent players. It automatically scales, offers multi-region replication, and integrates with IAM for fine-grained access control.\nKey benefits of using Amazon DynamoDB include:\nStable storage and fast retrieval of player data with low latency. No need to install, maintain, or manually scale the database. Seamless integration with Lambda, API Gateway, and Cognito. Supports conditional queries and secondary indexes for fast lookups. Provides backup and restore features, as well as detailed access control. Ideal for backend infrastructure of games, mobile apps, and web apps with cost efficiency. With these strengths, DynamoDB is a solid choice for storing large-scale game data with high performance and minimal operational cost.\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/",
	"title": "Modernizing Mobile Game Backend with AWS Cloud Services",
	"tags": [],
	"description": "",
	"content": "Modernizing Mobile Game Backend with AWS Cloud Services Overview As part of this workshop, our team presents the process of integrating core AWS services into a mobile tower defense game developed with Unity 6. Since Unity 6 no longer officially supports AWS SDKs, we designed the backend entirely with a serverless-first approach, using REST APIs authenticated via AWS Signature Version 4 or JWT tokens from Amazon Cognito.\nEach component is configured and integrated independently to ensure both security and scalability, while maintaining modularity and ease of testing. The overall implementation follows practical, production-ready principles while adhering to AWS\u0026rsquo;s Well-Architected Framework.\nTable of Contents Introduction Cognito User Authentication Setup Push Game Data from Unity to Amazon DynamoDB "
},
{
	"uri": "https://tang979.github.io/Aetheric/2-prerequiste-copy/",
	"title": "Account Authentication with Amazon Cognito",
	"tags": [],
	"description": "",
	"content": "\rYou need to prepare one Linux instance in the public subnet and one Windows instance in the private subnet to complete this lab.\nTo learn how to create a user pool, you can refer to the lab:\nAuthentication with Amazon Cognito To use AWS Systems Manager to manage the Windows instance specifically — and instances in general — we need to grant proper permissions for our instances to work with Systems Manager.\nIn this preparation step, we will also create an IAM Role to allow instances to interact with Systems Manager.\nContents Create User Pool "
},
{
	"uri": "https://tang979.github.io/Aetheric/2-prerequiste-copy/2.2-check_connection_to_unity/",
	"title": "Check Connection to Unity",
	"tags": [],
	"description": "",
	"content": " Go to the user you just created in the User Pool, and under the Overview section, copy the value ap-southeast-2.\nIn the App client section, copy the Client ID.\nIn your Unity project, locate the code section for the Register and Confirm pages. Create two variables: clientId and region. Assign the Client ID and Region values from your User Pool.\nEnter your registration information and click Register.\nAfter successful registration, you will receive a confirmation code via email. Copy the code.\nGo back to the Verify Email section:\nEnter the Confirmation Code you received. Click the Submit button.\nGo back to Amazon Cognito, navigate to Users under User Management.\nClick on the newly created user, scroll down to the User attributes section, and you’ll see your user information.\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/2-prerequiste-copy/2.3-clear/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": " Open the Amazon Cognito console\nSelect User pools from the menu on the left. Choose the User Pool (… the one you created earlier). Click the Delete button. In the \u0026ldquo;Delete user pool – …?\u0026rdquo; popup:\nSelect Delete Cognito domain … and Deactivate deletion protection. Type the User Pool name into the To confirm deletion field. Click the Delete button. "
},
{
	"uri": "https://tang979.github.io/Aetheric/3-accessibilitytoinstances/",
	"title": "Push Game Data from Unity to Amazon DynamoDB",
	"tags": [],
	"description": "",
	"content": "In this section, we will build the workflow that enables a Unity 6 game client to send game data (e.g., tower team, level progress, player state) to Amazon DynamoDB, using API Gateway and AWS Lambda, with authentication secured via Amazon Cognito.\nSince Unity 6 no longer supports the official AWS SDK, all backend interactions are handled via HTTP requests using UnityWebRequest. Therefore, API-level security and access control must be configured strictly and precisely.\nBefore you can send and persist any data, you must first configure the necessary backend services. The User Pool (Amazon Cognito), which manages user accounts and issues JWTs for API Gateway authorization, must be set up as described in the previous section.\nContent 3.1. Create DynamoDB Table and Configure Required Permissions \\\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://tang979.github.io/Aetheric/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]