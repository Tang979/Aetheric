[
{
	"uri": "https://tang979.github.io/Aetheric/3-ses_authentication/4.1-amazonses_configuration/",
	"title": "Amazon SES Configuration",
	"tags": [],
	"description": "",
	"content": " Open Amazon SES\nOn the left sidebar under Configuration, select Identities\nOn the Identities page, click Create identities\nOn the Create Identities page:\nIn the Identity details section, select Email Address Under Email address, enter your own email address. Finally, click Create Identity\nThen, go to your email inbox and click the verification link sent by Amazon Web Services to verify the identity\nAfter that, return to the Identities page to check whether the identity you just created has been Verified.\nIf it\u0026rsquo;s verified, it means you have successfully configured Amazon SES.\nNext, we will configure Lambda to handle the email sending logic.\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/4-pushdatafromunitytodynamodb/3.1-dynamodb/",
	"title": "Create DynamoDB Table and Configure Required Permissions",
	"tags": [],
	"description": "",
	"content": "Step 1: Create a DynamoDB Table Go to the DynamoDB Console. Click Create table. Enter your desired table name in the Table name field. Specify a Partition key – this will serve as your table\u0026rsquo;s primary key. You can also select the data type next to it. Click Create table to finish. Step 2: Configure Cognito Identity Pool Go to the Cognito Console. Select Identity pools. Click Create identity pool. Choose Authenticated access, then select the login method(s) you\u0026rsquo;ve set up in User pools, then click Next. Set the IAM role name and click Next. Choose the User Pool ID and App Client ID you want to associate for authentication, then click Next. Give your Identity pool a name, review your configuration, then click Create identity pool. Step 3: Create an IAM Policy to Grant Cognito Access to DynamoDB Go to the IAM Policies Console. Click Create policy.\nSwitch to the JSON tab and update it as follows:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:GetItem\u0026#34;, \u0026#34;dynamodb:PutItem\u0026#34;, \u0026#34;dynamodb:UpdateItem\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:[Region]:*:table/[Table Name]\u0026#34; } ] } Click Next, name the policy, and choose Create policy.\nStep 4: Attach Policy to Cognito Role and Edit Trust Policy Go to the IAM Console. Click Roles from the left menu and find the IAM role created with your Identity Pool.\nClick Add permissions → Attach policies.\nSearch and select the policy you just created → Add permissions.\nGo to the Trust relationships tab → click Edit trust policy.\nReplace the trust policy with:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Federated\u0026#34;: \u0026#34;cognito-identity.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:aud\u0026#34;: \u0026#34;[Identity pool ID]\u0026#34; }, \u0026#34;ForAnyValue:StringLike\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:amr\u0026#34;: \u0026#34;authenticated\u0026#34; } } } ] } "
},
{
	"uri": "https://tang979.github.io/Aetheric/5-s3withunity/4.1-creates3/",
	"title": "Create S3 Bucket for Game Assets",
	"tags": [],
	"description": "",
	"content": "Access Amazon S3 Access the S3 page Click on the Create bucket button Configure the bucket Basic information:\nBucket name: Enter your bucket name (example: mygame-assets) Object Ownership: Keep the default \u0026ldquo;ACLs disabled\u0026rdquo;\nBlock Public Access settings: By default, S3 will block all public access. To allow assets to be loaded from your game, uncheck \u0026ldquo;Block all public access\u0026rdquo;\nClick Create bucket\nConfigure CORS (Cross-Origin Resource Sharing) CORS allows your Unity game to load assets from the S3 bucket:\nSelect the bucket you just created\nSelect the Permissions tab\nScroll down to the Cross-origin resource sharing (CORS) section\nClick Edit\nEnter the following CORS configuration:\n[ { \u0026#34;AllowedHeaders\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;AllowedMethods\u0026#34;: [ \u0026#34;GET\u0026#34;, \u0026#34;HEAD\u0026#34; ], \u0026#34;AllowedOrigins\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;ExposeHeaders\u0026#34;: [] } ] Click Save changes\nCreate a Bucket Policy To allow public access to assets:\nStill in the Permissions tab, scroll to the Bucket policy section\nClick Edit\nEnter the following policy (replace mygame-assets with your bucket name):\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadForGetBucketObjects\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::mygame-assets/*\u0026#34; } ] } Click Save changes\nUpload assets to S3 Go back to the Objects tab Click Create folder to create a folder structure (example: textures, models, audio, bundles) To upload assets: Select the destination folder Click Upload Select files from your computer Click Upload Get asset URLs After uploading, you can get the URL of an asset to use in Unity:\nSelect the uploaded asset Navigate to the file you uploaded to see the Object URL The URL will look like: https://mygame-assets.s3.amazonaws.com/textures/character.png Security notes The above configuration allows anyone to access your assets. In a production environment, you should:\nUse CloudFront with OAI (Origin Access Identity) to restrict direct access to S3 Use Signed URLs or Cookies to control access Consider using AWS WAF to protect against attacks "
},
{
	"uri": "https://tang979.github.io/Aetheric/2-prerequiste-copy/2.1-createuserpool/",
	"title": "Create User Pool",
	"tags": [],
	"description": "",
	"content": " Open the Amazon Cognito console\nSelect User pools from the left-hand menu. Click Create user pool.\nOn the Set up resources for your application page\nUnder Define your application, select Mobile app Under Configure options, select Email, Username\nUnder Required attributes for sign-up, select Email Finally, click Create User Directory\nReturn to the Amazon Cognito console, and click on the newly created user pool.\nIn the left menu, under Application, click App client.\nUnder App clients and analytics, click on the newly created app client name.\nIn the App client section, click Edit. In the Edit app client information section, enable the following options:\nChoice-based sign-in: ALLOW_USER_AUTH Sign in with username and password: ALLOW_USER_PASSWORD_AUTH Get new user tokens from existing authenticated sessions: ALLOW_REFRESH_TOKEN_AUTH\nThen scroll to the bottom and click Save Changes.\nThat completes the process of creating a User Pool.\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "The project titled \u0026ldquo;Modernizing Mobile Game Backend with AWS Cloud Services\u0026rdquo; focuses on building a practical backend architecture for a mobile game developed with Unity 6. The architecture follows a serverless, cloud-native model, eliminating the need for traditional servers and leveraging AWS services that automatically scale and charge based on actual usage.\nAdvantages of the Solution Advantage Description Low Cost No need to rent EC2 servers; all services are serverless, reducing operational costs during low traffic Auto-scaling Lambda, DynamoDB, and API Gateway scale automatically based on demand without manual intervention Native Unity Integration Uses UnityWebRequest for communication; no SDK needed, giving developers full control over request/response Strong Security Authentication via JWT (Amazon Cognito), access controlled by IAM using the Least Privilege principle Easy to Test \u0026amp; Debug API endpoints can be tested using Postman before integrating with Unity; centralized logs via CloudWatch Limitations and Challenges Limitation / Challenge Description No official SDK for Unity 6 Requires manually signing requests using AWS Signature V4 or handling JWT authentication manually Steep learning curve for IAM Misconfigurations can easily break access or cause security risks if IAM permissions are not well understood Difficult to emulate offline Since most components depend on live AWS services, simulating the full backend offline is challenging Potential cost growth at scale While initially cost-effective, large-scale user bases require architecture reviews to optimize costs and performance Who is this for? Game developers looking to learn and apply real-world cloud architecture tailored for mobile games. Student teams building a fast MVP without maintaining server infrastructure. AWS learners seeking an end-to-end, practical use case involving Lambda, Cognito, API Gateway, and DynamoDB. "
},
{
	"uri": "https://tang979.github.io/Aetheric/1-introduce/1.1-introduce-services/",
	"title": "Introduction to AWS Services Used",
	"tags": [],
	"description": "",
	"content": "Amazon Cognito Service Amazon Cognito is an AWS service that helps manage and authenticate users securely without the need to build your own registration, login, or password management system. Cognito supports login via email, phone number, social logins (Google, Facebook, Apple), or enterprise accounts using SAML. It issues OAuth2-compliant security tokens that can be used to access backend services.\nCognito allows centralized user management via IAM, supports multi-factor authentication (MFA), fine-grained role-based access control, and provides virtually unlimited scalability. It also logs sign-in activities and errors to enhance traceability and security.\nKey benefits of using Amazon Cognito include:\nNo need to implement your own login, password reset, or email verification systems. Supports multiple login methods: email, social accounts, and enterprise identity providers. Centralized user management with IAM integration and clear role separation. Easy integration with API Gateway, Lambda, DynamoDB, S3, and more. Logs user activity to increase system visibility and security. Automatically scales with no server infrastructure management. With these advantages, Cognito eliminates the need for bastion hosts or custom session management, saving time and infrastructure cost when building user authentication for your backend.\nAmazon SES (Simple Email Service) Amazon SES is AWS\u0026rsquo;s scalable and secure email-sending service that allows you to automatically send emails from your app or game without hosting your own mail server. It supports use cases such as email confirmation, password reset, and user feedback — all with high deliverability and robust security.\nYou can configure SES to send email from a custom sender address (e.g., support@yourgame.com) and integrate authentication mechanisms like SPF and DKIM to prevent spam flags. It also works seamlessly with Lambda or API Gateway, so clients like Unity can trigger emails securely without exposing sensitive credentials.\nKey benefits of using Amazon SES include:\nSend automated email confirmations, password resets, or feedback responses. No need to set up or maintain your own mail infrastructure. Easily integrates with services like Lambda, API Gateway, and S3. Supports domain authentication (SPF, DKIM) for improved email trust. Monitor delivery rates, bounce rates, and spam reports. Low cost, with thousands of free emails per month within AWS Free Tier. With these benefits, Amazon SES is a secure, reliable, and cost-effective solution for implementing in-game email delivery features without worrying about backend complexity.\nAmazon DynamoDB Service Amazon DynamoDB is AWS\u0026rsquo;s fully managed NoSQL database service that allows you to store and retrieve data quickly and flexibly without managing any server infrastructure. With DynamoDB, you can easily store data like player accounts, scores, game progress, inventory, or tower upgrade information.\nDynamoDB operates as a key-value and document database that delivers millisecond latency even at high scale — supporting millions of concurrent players. It automatically scales, offers multi-region replication, and integrates with IAM for fine-grained access control.\nKey benefits of using Amazon DynamoDB include:\nStable storage and fast retrieval of player data with low latency. No need to install, maintain, or manually scale the database. Seamless integration with Lambda, API Gateway, and Cognito. Supports conditional queries and secondary indexes for fast lookups. Provides backup and restore features, as well as detailed access control. Ideal for backend infrastructure of games, mobile apps, and web apps with cost efficiency. With these strengths, DynamoDB is a solid choice for storing large-scale game data with high performance and minimal operational cost.\nAWS Lambda Service AWS Lambda is a serverless computing service that allows you to run code without managing servers. With Lambda, you can focus on writing game logic code while AWS automatically manages the entire infrastructure to run that code. Lambda supports many popular programming languages including Node.js, Python, Java, C#, Go, and Ruby.\nLambda is particularly well-suited for game backend tasks such as user authentication, score updates, purchase transaction processing, or dynamic content generation. The service automatically scales based on demand, from a few requests per day to thousands per second.\nKey benefits of using AWS Lambda include:\nNo server management required, automatic scaling based on usage Pay only for compute time used, reducing costs Pre-integrated with other AWS services like API Gateway, DynamoDB, S3 Easily update processing logic without redeploying the entire system Supports multiple popular programming languages Configure memory allocation and timeout limits for each function Amazon API Gateway Service Amazon API Gateway is an AWS service that helps you create, publish, maintain, monitor, and secure APIs for your game. API Gateway acts as a front door between your client (Unity game) and backend services like Lambda, DynamoDB, or EC2.\nWith API Gateway, you can create REST APIs or WebSocket APIs to handle game interactions such as login, progress saving, score updates, or real-time communication. The service automatically handles authentication, rate limiting, and scaling to accommodate player traffic.\nKey benefits of using Amazon API Gateway include:\nCreate secure API endpoints for game-to-backend communication Support authentication with Cognito or custom methods Automatically scale from a few requests to thousands per second Monitor and log API calls to detect issues Set rate limits to prevent abuse or attacks Create different environments (staging, production) for testing before deployment Amazon S3 Service Amazon S3 (Simple Storage Service) is AWS\u0026rsquo;s object storage service that provides virtually unlimited storage and retrieval capabilities. For games, S3 is ideal for storing dynamic assets such as images, audio, video, 3D models, or content update packages.\nS3 allows you to upload new assets without releasing a new game version, helping reduce the initial size of your game and improve user experience. The service offers high durability, nearly 100% availability, and unlimited scalability.\nKey benefits of using Amazon S3 include:\nStore and distribute game assets with high reliability Reduce application size by loading dynamic assets when needed Update game content without releasing new versions Integrate with CloudFront for faster global content delivery Control access in detail through IAM and bucket policies Low storage costs with different storage tiers based on needs "
},
{
	"uri": "https://tang979.github.io/Aetheric/",
	"title": "Modernizing Mobile Game Backend with AWS Cloud Services",
	"tags": [],
	"description": "",
	"content": "Modernizing Mobile Game Backend with AWS Cloud Services Overview In this workshop, our team presents the process of integrating core AWS services into a tower defense mobile game project developed on the Unity 6 platform. Since Unity 6 has discontinued official support for the AWS SDK, we\u0026rsquo;ve built the entire backend architecture following a serverless approach and implemented communication with AWS services through REST APIs signed with AWS Signature Version 4 or authenticated with JWT from Amazon Cognito.\nConfiguration and integration are performed in separate functional blocks, ensuring the system is secure, scalable, and easy to test independently. The entire deployment process is designed with a practical approach – prioritizing efficiency and simplicity while still adhering to AWS Well-Architected Framework principles.\nContents Introduction Cognito Account Authentication Using Amazon SES to Send Emails from Users to Server Pushing Data from Unity to Amazon DynamoDB Using S3 to Load Dynamic Assets for Unity Games Clean up Resources "
},
{
	"uri": "https://tang979.github.io/Aetheric/2-prerequiste-copy/",
	"title": "Account Authentication with Amazon Cognito",
	"tags": [],
	"description": "",
	"content": "\rYou need to prepare one Linux instance in the public subnet and one Windows instance in the private subnet to complete this lab.\nTo learn how to create a user pool, you can refer to the lab:\nAuthentication with Amazon Cognito To use AWS Systems Manager to manage the Windows instance specifically — and instances in general — we need to grant proper permissions for our instances to work with Systems Manager.\nIn this preparation step, we will also create an IAM Role to allow instances to interact with Systems Manager.\nContents Create User Pool "
},
{
	"uri": "https://tang979.github.io/Aetheric/2-prerequiste-copy/2.2-check_connection_to_unity/",
	"title": "Check Connection to Unity",
	"tags": [],
	"description": "",
	"content": " Go to the user you just created in the User Pool, and under the Overview section, copy the value ap-southeast-2.\nIn the App client section, copy the Client ID.\nIn your Unity project, locate the code section for the Register and Confirm pages. Create two variables: clientId and region. Assign the Client ID and Region values from your User Pool.\nEnter your registration information and click Register.\nAfter successful registration, you will receive a confirmation code via email. Copy the code.\nGo back to the Verify Email section:\nEnter the Confirmation Code you received. Click the Submit button.\nGo back to Amazon Cognito, navigate to Users under User Management.\nClick on the newly created user, scroll down to the User attributes section, and you’ll see your user information.\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/4-pushdatafromunitytodynamodb/3.2-lambda/",
	"title": "Create DynamoDB Table and Configure Required Permissions",
	"tags": [],
	"description": "",
	"content": "Step 1: Create a DynamoDB Table Go to the DynamoDB Console. Click Create table. Enter your desired table name in the Table name field. Specify a Partition key – this will serve as your table\u0026rsquo;s primary key. You can also select the data type next to it. Click Create table to finish. Step 2: Configure Cognito Identity Pool Go to the Cognito Console. Select Identity pools. Click Create identity pool. Choose Authenticated access, then select the login method(s) you\u0026rsquo;ve set up in User pools, then click Next. Set the IAM role name and click Next. Choose the User Pool ID and App Client ID you want to associate for authentication, then click Next. Give your Identity pool a name, review your configuration, then click Create identity pool. Step 3: Create an IAM Policy to Grant Cognito Access to DynamoDB Go to the IAM Policies Console. Click Create policy.\nSwitch to the JSON tab and update it as follows:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:GetItem\u0026#34;, \u0026#34;dynamodb:PutItem\u0026#34;, \u0026#34;dynamodb:UpdateItem\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:[Region]:*:table/[Table Name]\u0026#34; } ] } Click Next, name the policy, and choose Create policy.\nStep 4: Attach Policy to Cognito Role and Edit Trust Policy Go to the IAM Console. Click Roles from the left menu and find the IAM role created with your Identity Pool.\nClick Add permissions → Attach policies.\nSearch and select the policy you just created → Add permissions.\nGo to the Trust relationships tab → click Edit trust policy.\nReplace the trust policy with:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Federated\u0026#34;: \u0026#34;cognito-identity.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:aud\u0026#34;: \u0026#34;[Identity pool ID]\u0026#34; }, \u0026#34;ForAnyValue:StringLike\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:amr\u0026#34;: \u0026#34;authenticated\u0026#34; } } } ] } "
},
{
	"uri": "https://tang979.github.io/Aetheric/3-ses_authentication/4.2-lambda-configuration/",
	"title": "Lambda Configuration",
	"tags": [],
	"description": "",
	"content": " Open Lambda.\nIn the Dashboard, click Create function\nOn the Create function page, follow these steps:\nIn Function name, enter your desired function name In the Runtime section, choose the programming language for your email handling logic.\nIn this case, select Python 3.12 Under Permissions, select Create a new role with basic Lambda permissions Scroll to the bottom and click Create function\nAfter the function is created, scroll down to the Code section and paste in the following code.\nThen click the Deploy button on the left side to save it:\nimport boto3 import json ses = boto3.client(\u0026#39;ses\u0026#39;, region_name=\u0026#39;ap-southeast-2\u0026#39;) def lambda_handler(event, context): body = json.loads(event[\u0026#39;body\u0026#39;]) sender = \u0026#34;minhallk.vk@gmail.com\u0026#34; # Verified sender email to_email = \u0026#34;minhallk.vk@gmail.com\u0026#34; # Receiver email for feedback subject = body.get(\u0026#34;subject\u0026#34;, \u0026#34;User Feedback\u0026#34;) message = body.get(\u0026#34;message\u0026#34;, \u0026#34;No message provided\u0026#34;) user_email = body.get(\u0026#34;user_email\u0026#34;, \u0026#34;Not provided\u0026#34;) # Send email using SES response = ses.send_email( Source=sender, Destination={ \u0026#39;ToAddresses\u0026#39;: [to_email] }, Message={ \u0026#39;Subject\u0026#39;: { \u0026#39;Data\u0026#39;: subject }, \u0026#39;Body\u0026#39;: { \u0026#39;Text\u0026#39;: { \u0026#39;Data\u0026#39;: f\u0026#34;From: {user_email}\\n\\nMessage:\\n{message}\u0026#34; } } } ) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: \u0026#39;Feedback sent successfully!\u0026#39;}) } "
},
{
	"uri": "https://tang979.github.io/Aetheric/5-s3withunity/4.2-s3unity/",
	"title": "Loading Dynamic Assets from S3",
	"tags": [],
	"description": "",
	"content": "Loading Dynamic Assets from Amazon S3 into Unity In this section, we will learn how to load dynamic assets (such as images, audio, 3D models) from Amazon S3 into your Unity game using S3 URLs.\n1. Preparation Before starting, make sure you have:\nCreated an S3 bucket and configured it as shown in the previous section Uploaded your assets to your S3 bucket Ensured that assets are publicly accessible or have appropriate CORS configuration 2. Create a Script to Load Assets from S3 using URL In Unity, we\u0026rsquo;ll create a simple script to load assets from S3 using direct URLs:\nusing UnityEngine; using System.Collections; using UnityEngine.Networking; public class S3AssetLoader : MonoBehaviour { // URL of the asset on S3 public string assetUrl = \u0026#34;https://your-bucket-name.s3.amazonaws.com/path-to-your-asset.png\u0026#34;; // References to components that will use the asset public UnityEngine.UI.RawImage imageDisplay; public AudioSource audioSource; void Start() { // Automatically load asset on startup StartCoroutine(LoadAssetFromS3()); } // Function to load asset from URL public IEnumerator LoadAssetFromS3() { Debug.Log(\u0026#34;Starting to load asset from: \u0026#34; + assetUrl); // Determine asset type from URL if (assetUrl.EndsWith(\u0026#34;.png\u0026#34;) || assetUrl.EndsWith(\u0026#34;.jpg\u0026#34;) || assetUrl.EndsWith(\u0026#34;.jpeg\u0026#34;)) { yield return StartCoroutine(LoadImageFromUrl(assetUrl)); } else if (assetUrl.EndsWith(\u0026#34;.mp3\u0026#34;) || assetUrl.EndsWith(\u0026#34;.wav\u0026#34;) || assetUrl.EndsWith(\u0026#34;.ogg\u0026#34;)) { yield return StartCoroutine(LoadAudioFromUrl(assetUrl)); } else { Debug.LogError(\u0026#34;File format not supported!\u0026#34;); } } // Load image from URL private IEnumerator LoadImageFromUrl(string url) { using (UnityWebRequest www = UnityWebRequestTexture.GetTexture(url)) { yield return www.SendWebRequest(); if (www.result == UnityWebRequest.Result.Success) { Texture2D texture = DownloadHandlerTexture.GetContent(www); // Display image if RawImage component exists if (imageDisplay != null) { imageDisplay.texture = texture; Debug.Log(\u0026#34;Successfully loaded and displayed image!\u0026#34;); } else { Debug.Log(\u0026#34;Successfully loaded image, but no RawImage to display it!\u0026#34;); } } else { Debug.LogError(\u0026#34;Error loading image: \u0026#34; + www.error); } } } // Load audio from URL private IEnumerator LoadAudioFromUrl(string url) { // Determine audio type from URL AudioType audioType = AudioType.UNKNOWN; if (url.EndsWith(\u0026#34;.mp3\u0026#34;)) audioType = AudioType.MPEG; else if (url.EndsWith(\u0026#34;.wav\u0026#34;)) audioType = AudioType.WAV; else if (url.EndsWith(\u0026#34;.ogg\u0026#34;)) audioType = AudioType.OGGVORBIS; using (UnityWebRequest www = UnityWebRequestMultimedia.GetAudioClip(url, audioType)) { yield return www.SendWebRequest(); if (www.result == UnityWebRequest.Result.Success) { AudioClip clip = DownloadHandlerAudioClip.GetContent(www); // Play audio if AudioSource exists if (audioSource != null) { audioSource.clip = clip; audioSource.Play(); Debug.Log(\u0026#34;Successfully loaded and played audio!\u0026#34;); } else { Debug.Log(\u0026#34;Successfully loaded audio, but no AudioSource to play it!\u0026#34;); } } else { Debug.LogError(\u0026#34;Error loading audio: \u0026#34; + www.error); } } } // Function to load asset on demand (can be called from a button) public void LoadAssetOnDemand(string url) { assetUrl = url; StartCoroutine(LoadAssetFromS3()); } } 3. Using the Script in Unity Step 1: Create GameObject and Attach Script In Unity, create a new GameObject (GameObject \u0026gt; Create Empty) Name it \u0026ldquo;S3AssetManager\u0026rdquo; Add the S3AssetLoader component to the GameObject (Add Component \u0026gt; Scripts \u0026gt; S3AssetLoader) Step 2: Set Up URL and References In the Inspector, enter the URL of the asset on S3 in the \u0026ldquo;Asset Url\u0026rdquo; field Example: https://your-bucket-name.s3.amazonaws.com/images/character.png Drag the necessary components into the corresponding fields: Drag a GameObject with a RawImage component into the \u0026ldquo;Image Display\u0026rdquo; field to display images Drag a GameObject with an AudioSource component into the \u0026ldquo;Audio Source\u0026rdquo; field to play audio Step 3: Create UI to Load Assets on Demand using UnityEngine; using UnityEngine.UI; public class AssetLoadButton : MonoBehaviour { public S3AssetLoader assetLoader; public InputField urlInput; public void LoadAssetFromInput() { if (urlInput != null \u0026amp;\u0026amp; !string.IsNullOrEmpty(urlInput.text)) { assetLoader.LoadAssetOnDemand(urlInput.text); } else { Debug.LogError(\u0026#34;Invalid or empty URL!\u0026#34;); } } } 4. Security Notes Don\u0026rsquo;t store sensitive information: Don\u0026rsquo;t embed AWS credentials in Unity code Use backend as intermediary: It\u0026rsquo;s best to use a backend server to create pre-signed URLs Limit access rights: Only allow access to necessary assets 5. Conclusion With this guide, you can easily load dynamic assets from Amazon S3 into your Unity game using URLs. This allows you to:\nUpdate game content without releasing a new version Reduce initial application size Increase flexibility in content management Experiment with different types of assets and optimize the loading process for the best user experience!\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/3-ses_authentication/4.3-apigateway_configuration/",
	"title": "API Gateway Configuration",
	"tags": [],
	"description": "",
	"content": " Open Amazon API Gateway and click the Create an API button to start the configuration process\nNext, configure the Configure API section:\nIn the API name field, enter a name of your choice Under the Integrations section, choose Lambda.\nIn the Lambda function field, select the Lambda function you just created Once done, click Next to continue\nIn the Configure routes step, under the Method dropdown, select POST.\nAfter that, click Next\nIn the final step, review all the configuration details to ensure everything is correct.\nOnce confirmed, click Create to finish setting up the API Gateway\nNow that the API Gateway has been configured, we will move on to integrating this service into the game.\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/2-prerequiste-copy/2.3-clear/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": " Open the Amazon Cognito console\nSelect User pools from the menu on the left. Choose the User Pool (… the one you created earlier). Click the Delete button. In the \u0026ldquo;Delete user pool – …?\u0026rdquo; popup:\nSelect Delete Cognito domain … and Deactivate deletion protection. Type the User Pool name into the To confirm deletion field. Click the Delete button. "
},
{
	"uri": "https://tang979.github.io/Aetheric/4-pushdatafromunitytodynamodb/3.3-api-gateway/",
	"title": "Create DynamoDB Table and Configure Required Permissions",
	"tags": [],
	"description": "",
	"content": "Step 1: Create a DynamoDB Table Go to the DynamoDB Console. Click Create table. Enter your desired table name in the Table name field. Specify a Partition key – this will serve as your table\u0026rsquo;s primary key. You can also select the data type next to it. Click Create table to finish. Step 2: Configure Cognito Identity Pool Go to the Cognito Console. Select Identity pools. Click Create identity pool. Choose Authenticated access, then select the login method(s) you\u0026rsquo;ve set up in User pools, then click Next. Set the IAM role name and click Next. Choose the User Pool ID and App Client ID you want to associate for authentication, then click Next. Give your Identity pool a name, review your configuration, then click Create identity pool. Step 3: Create an IAM Policy to Grant Cognito Access to DynamoDB Go to the IAM Policies Console. Click Create policy.\nSwitch to the JSON tab and update it as follows:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:GetItem\u0026#34;, \u0026#34;dynamodb:PutItem\u0026#34;, \u0026#34;dynamodb:UpdateItem\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:[Region]:*:table/[Table Name]\u0026#34; } ] } Click Next, name the policy, and choose Create policy.\nStep 4: Attach Policy to Cognito Role and Edit Trust Policy Go to the IAM Console. Click Roles from the left menu and find the IAM role created with your Identity Pool.\nClick Add permissions → Attach policies.\nSearch and select the policy you just created → Add permissions.\nGo to the Trust relationships tab → click Edit trust policy.\nReplace the trust policy with:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Federated\u0026#34;: \u0026#34;cognito-identity.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:aud\u0026#34;: \u0026#34;[Identity pool ID]\u0026#34; }, \u0026#34;ForAnyValue:StringLike\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:amr\u0026#34;: \u0026#34;authenticated\u0026#34; } } } ] } "
},
{
	"uri": "https://tang979.github.io/Aetheric/3-ses_authentication/",
	"title": "Using Amazon SES to Send Emails from User to Server",
	"tags": [],
	"description": "",
	"content": "In this tutorial, we will practice using Amazon SES to send feedback from users to the game publisher\u0026rsquo;s email in Unity. Because Amazon SES does not support direct connection to Unity, we will use API Gateway and Lambda to enable the connection.\nContents Amazon SES Configuration Lambda Configuration API Gateway Configuration Setup Connection in Unity "
},
{
	"uri": "https://tang979.github.io/Aetheric/3-ses_authentication/4.4-setup_connection_in_unity/",
	"title": "Connect to Unity",
	"tags": [],
	"description": "",
	"content": " Reopen API Gateway and access the API you just created.\nOn the right side, under the Deploy section, select Stages In the Stages panel, click on $default to open the Stages Detail view In the Stages Detail, copy the provided URL\nReopen your Lambda function, scroll down to the code, and locate the sender and to_email variables.\nReplace them with your own email address\nIn your game, create a simple feedback form for testing.\nLog in using one of your other accounts\nCreate a script to handle feedback submissions\nPaste the URL you copied from API Gateway into the script\nOnce everything is set up, run a test\nAfter sending feedback, check your main email inbox to see if the feedback was received\nAnd that’s it — you have successfully used the Amazon SES service to send feedback from Unity to your email inbox!\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/4-pushdatafromunitytodynamodb/",
	"title": "Push Game Data from Unity to Amazon DynamoDB",
	"tags": [],
	"description": "",
	"content": "In this section, we will build the workflow that enables a Unity 6 game client to send game data (e.g., tower team, level progress, player state) to Amazon DynamoDB, using API Gateway and AWS Lambda, with authentication secured via Amazon Cognito.\nSince Unity 6 no longer supports the official AWS SDK, all backend interactions are handled via HTTP requests using UnityWebRequest. Therefore, API-level security and access control must be configured strictly and precisely.\nBefore you can send and persist any data, you must first configure the necessary backend services. The User Pool (Amazon Cognito), which manages user accounts and issues JWTs for API Gateway authorization, must be set up as described in the previous section.\nContent 3.1. Create DynamoDB Table and Configure Required Permissions \\\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/3-ses_authentication/4.5-clear/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": " Open Amazon SES\nSelect the Identity you previously created After selecting it, click the Delete button A Delete Identity confirmation dialog will appear — click Confirm\nOpen Lambda\nSelect the Function you want to delete, then in the Actions menu, click Delete In the Delete Function dialog that appears, type Confirm and click Delete\nOpen Amazon API Gateway\nSelect the API you want to delete, then click Delete A Delete API confirmation dialog will appear — type Confirm and click Delete\n"
},
{
	"uri": "https://tang979.github.io/Aetheric/5-s3withunity/",
	"title": "Using S3 to Load Dynamic Assets for Unity Games",
	"tags": [],
	"description": "",
	"content": "Introduction Amazon S3 (Simple Storage Service) is an ideal cloud storage solution for managing and distributing dynamic assets for mobile games developed with Unity. Loading dynamic assets helps reduce the initial size of the game, improves loading times, and allows content updates without releasing new versions.\nWorkshop Overview In this workshop, we will learn:\nHow to set up an S3 bucket to store game assets Integrating dynamic asset loading into Unity games "
},
{
	"uri": "https://tang979.github.io/Aetheric/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "1. Delete DynamoDB Table Access the AWS Management Console and follow these steps:\nNavigate to the DynamoDB service and access the DynamoDB Console In the left navigation pane, select Tables Find and select the table you want to delete from the list Click the Delete button in the top right corner In the confirmation dialog, enter confirm and select Delete table 2. Delete S3 Buckets Access the S3 Console and perform the following steps:\nLocate the bucket you want to delete Select the bucket and click the Empty button Enter permanently delete to confirm and select Empty bucket Once the bucket is empty, select Delete Confirm by entering the bucket name and select Delete bucket "
},
{
	"uri": "https://tang979.github.io/Aetheric/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://tang979.github.io/Aetheric/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]