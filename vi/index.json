[
{
	"uri": "/vi/3-ses_authentication/4.1-amazonses_configuration/",
	"title": "Cấu hinh Amazon SES",
	"tags": [],
	"description": "",
	"content": " Mở Amazon SES\nỞ bên trái ở phân Configuration chọn Identities Tại trang Identities nhấp chọn vào phần create identities Tại trang Create Identities\nTrong phần Identity detaills chọn mục Email Address Dưới phần Email address ghi địa chỉ email của mình vô. Cuối cùng ấn Create Identity Sau đó ta vào email của mình nhấn vào đường link trong email của Amazon Web Service gửi về để xác thực tạo Sau đó ta quay trở lại trang Identities để coi xem cái identity mình vừa tạo đã Verified hay chưa. Nếu đã Verified coi như bạn đã cấu hình thành công Amazon SES tiếp theo ta sẽ đi cấu hình Lambda để sử lý logic gửi email\n"
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Đề tài \u0026ldquo;Hiện đại hóa hệ thống backend cho game di động bằng các dịch vụ đám mây AWS\u0026rdquo; tập trung vào việc xây dựng một kiến trúc backend thực tiễn phục vụ trò chơi di động được phát triển bằng Unity 6. Đây là loại kiến trúc ứng dụng mô hình serverless cloud-native, không sử dụng máy chủ truyền thống, mà tận dụng các dịch vụ AWS có khả năng tự động mở rộng và tính phí theo mức sử dụng thực tế.\nƯu điểm của giải pháp Ưu điểm Mô tả Chi phí thấp Không cần thuê máy chủ EC2; toàn bộ dịch vụ là serverless, tối ưu chi phí vận hành khi số lượng người dùng thấp Tự động mở rộng Lambda, DynamoDB, và API Gateway có khả năng scale tự động theo số lượng người dùng, không cần DevOps Tích hợp trực tiếp với Unity Giao tiếp bằng UnityWebRequest, không cần SDK, dễ kiểm soát request/response Bảo mật mạnh mẽ Xác thực bằng JWT (Amazon Cognito), phân quyền bằng IAM theo nguyên tắc \u0026ldquo;Least Privilege\u0026rdquo; Dễ kiểm thử và debug Sử dụng Postman test API trước khi tích hợp với Unity; log lỗi tập trung tại CloudWatch Hạn chế và thách thức Hạn chế / Thách thức Mô tả Không có SDK chính thức cho Unity 6 Phải tự ký AWS Signature V4 thủ công hoặc dùng JWT; dễ phát sinh lỗi xác thực nếu sai định dạng Lập trình viên phải hiểu kỹ về AWS IAM, Security Token Nếu không nắm rõ quyền, rất dễ cấu hình sai, gây lỗi bảo mật hoặc không truy cập được dữ liệu Khó mô phỏng backend offline Vì server phụ thuộc vào nhiều dịch vụ cloud, không dễ mô phỏng toàn bộ offline trong quá trình phát triển Chi phí có thể tăng khi scale lớn Dù chi phí thấp ở giai đoạn đầu, nhưng nếu lên hàng chục ngàn user, cần đánh giá lại mô hình lưu trữ/tối ưu API Đề tài phù hợp với ai? Lập trình viên game muốn học về kiến trúc cloud thực tế, dễ áp dụng cho game mobile. Nhóm sinh viên muốn xây dựng MVP nhanh, không cần tốn công DevOps. Người học AWS cần một bài toán \u0026ldquo;real-world\u0026rdquo; để thực hành Lambda, Cognito, API Gateway, DynamoDB một cách liền mạch và có ý nghĩa. "
},
{
	"uri": "/vi/1-introduce/1.1-introduce-services/",
	"title": "Giới thiệu các dịch vụ sử dụng",
	"tags": [],
	"description": "",
	"content": "Dịch vụ Amazon Cognito Amazon Cognito là một dịch vụ của AWS giúp quản lý và xác thực người dùng một cách an toàn mà không cần tự xây dựng hệ thống đăng ký, đăng nhập, hay xử lý mật khẩu. Cognito hỗ trợ đăng nhập bằng email, số điện thoại, mạng xã hội (Google, Facebook, Apple), hoặc tài khoản doanh nghiệp thông qua SAML, đồng thời sử dụng token bảo mật theo chuẩn OAuth2 để xác thực khi truy cập các dịch vụ backend.\nCognito cho phép quản lý người dùng tập trung thông qua IAM, hỗ trợ xác thực đa yếu tố (MFA), phân quyền truy cập theo nhóm và cung cấp khả năng mở rộng linh hoạt không giới hạn người dùng. Ngoài ra, các sự kiện đăng nhập và lỗi cũng được ghi log để phục vụ kiểm tra và bảo mật\nVới việc sử dụng Amazon Cognito, bạn sẽ có được những ưu điểm sau: Không cần tự viết hệ thống đăng nhập, quên mật khẩu hay xác thực email. Hỗ trợ đăng nhập đa dạng: email, mạng xã hội, tài khoản doanh nghiệp. Quản lý user tập trung bằng IAM và phân quyền rõ ràng. Tích hợp dễ dàng với API Gateway, Lambda, DynamoDB, S3\u0026hellip; Ghi log hoạt động người dùng, tăng cường bảo mật. Tự động mở rộng quy mô mà không cần quản lý server. Với những ưu điểm trên, bạn có thể sử dụng Session Manager thay vì sử dụng kỹ thuật Bastion host giúp chúng ta tiết kiệm được thời gian và chi phí khi quản lý server Bastion.\nDịch vụ Amazon SES Amazon SES (Simple Email Service) là dịch vụ gửi email chuyên nghiệp của AWS, cho phép bạn gửi email tự động từ ứng dụng hoặc game mà không cần xây dựng hệ thống email server riêng. SES hỗ trợ gửi email thông báo, xác nhận, khôi phục mật khẩu, và thu thập phản hồi từ người dùng một cách nhanh chóng, bảo mật và đáng tin cậy.\nSES giúp bạn dễ dàng cấu hình để gửi email từ một địa chỉ tùy chọn (ví dụ: support@yourgame.com) và hỗ trợ xác thực SPF, DKIM nhằm đảm bảo email không bị đánh dấu spam. Ngoài ra, bạn có thể kết hợp với AWS Lambda hoặc API Gateway để gửi email từ client như Unity mà không lộ thông tin nhạy cảm.\nVới việc sử dụng Amazon SES, bạn sẽ có được những ưu điểm sau: Gửi email xác nhận, reset password, hoặc feedback tự động. Không cần dựng hoặc quản lý máy chủ gửi mail riêng. Tích hợp dễ dàng với các dịch vụ như Lambda, API Gateway, S3. Hỗ trợ xác thực tên miền để tăng độ tin cậy của email. Theo dõi được tỷ lệ gửi thành công, email bị từ chối hoặc báo spam. Chi phí thấp, có thể gửi hàng nghìn email mỗi tháng miễn phí (trong AWS). Với những ưu điểm trên, Amazon SES là một giải pháp hiệu quả, bảo mật và tiết kiệm để bạn xây dựng hệ thống gửi email trong game hoặc ứng dụng mà không cần lo lắng về hạ tầng gửi mail.\nDịch vụ Amazon DynamoDB Amazon DynamoDB là dịch vụ cơ sở dữ liệu NoSQL của AWS, cho phép bạn lưu trữ và truy xuất dữ liệu nhanh chóng, linh hoạt mà không cần quản lý hạ tầng máy chủ. Với DynamoDB, bạn có thể dễ dàng lưu các thông tin như tài khoản người chơi, điểm số, tiến độ game, vật phẩm, hoặc dữ liệu nâng cấp tháp trong game.\nDynamoDB hoạt động theo mô hình key-value và document, cho phép truy cập dữ liệu gần như tức thì, ngay cả khi có hàng triệu người chơi cùng lúc. Dịch vụ này tự động mở rộng quy mô và cung cấp khả năng sao lưu, phục hồi, đồng bộ dữ liệu đa vùng và kiểm soát truy cập chi tiết thông qua IAM.\nVới việc sử dụng Amazon DynamoDB, bạn sẽ có được những ưu điểm sau: Lưu trữ dữ liệu người chơi ổn định, truy xuất nhanh với độ trễ thấp. Không cần cài đặt, bảo trì hoặc mở rộng cơ sở dữ liệu thủ công. Tích hợp dễ dàng với Lambda, API Gateway và Cognito. Hỗ trợ truy vấn có điều kiện và chỉ số phụ để tăng tốc tìm kiếm. Có thể sao lưu, khôi phục và phân quyền truy cập rõ ràng. Dùng tốt cho cả backend game, mobile, web với chi phí tối ưu. Với những ưu điểm trên, DynamoDB là lựa chọn lý tưởng để lưu trữ dữ liệu game quy mô lớn, đảm bảo hiệu năng cao và tiết kiệm chi phí vận hành.\nDịch vụ AWS Lambda AWS Lambda là dịch vụ điện toán serverless của AWS, cho phép bạn chạy code mà không cần quản lý máy chủ. Với Lambda, bạn chỉ cần tập trung vào việc viết code xử lý logic game, còn AWS sẽ tự động quản lý toàn bộ hạ tầng để chạy code đó. Lambda hỗ trợ nhiều ngôn ngữ lập trình phổ biến như Node.js, Python, Java, C#, Go và Ruby.\nLambda đặc biệt phù hợp cho các tác vụ xử lý backend của game như xác thực người dùng, cập nhật điểm số, xử lý giao dịch mua hàng, hoặc tạo nội dung động. Dịch vụ này tự động mở rộng theo nhu cầu, từ vài yêu cầu mỗi ngày đến hàng nghìn yêu cầu mỗi giây.\nVới việc sử dụng AWS Lambda, bạn sẽ có được những ưu điểm sau: Không cần quản lý server, tự động mở rộng theo nhu cầu sử dụng Chỉ trả tiền cho thời gian thực thi code, tiết kiệm chi phí Tích hợp sẵn với các dịch vụ AWS khác như API Gateway, DynamoDB, S3 Dễ dàng cập nhật logic xử lý mà không cần triển khai lại toàn bộ hệ thống Hỗ trợ nhiều ngôn ngữ lập trình phổ biến Có thể thiết lập giới hạn thời gian chạy và bộ nhớ cho từng hàm Dịch vụ Amazon API Gateway Amazon API Gateway là dịch vụ quản lý API của AWS, giúp bạn tạo, xuất bản, bảo trì, giám sát và bảo mật API cho game của mình. API Gateway đóng vai trò như cổng kết nối giữa client (game Unity) và các dịch vụ backend như Lambda, DynamoDB hoặc EC2.\nVới API Gateway, bạn có thể tạo các REST API hoặc WebSocket API để xử lý các tương tác trong game như đăng nhập, lưu tiến độ, cập nhật điểm số, hoặc giao tiếp thời gian thực. Dịch vụ này tự động xử lý xác thực, giới hạn tốc độ truy cập, và mở rộng quy mô để đáp ứng lưu lượng truy cập từ người chơi.\nVới việc sử dụng Amazon API Gateway, bạn sẽ có được những ưu điểm sau: Tạo điểm cuối API an toàn cho game giao tiếp với backend Hỗ trợ xác thực với Cognito hoặc các phương thức tùy chỉnh Tự động mở rộng để xử lý từ vài yêu cầu đến hàng nghìn yêu cầu mỗi giây Giám sát và ghi log các cuộc gọi API để phát hiện vấn đề Thiết lập giới hạn tốc độ để ngăn chặn lạm dụng hoặc tấn công Tạo môi trường khác nhau (staging, production) để kiểm thử trước khi triển khai Dịch vụ Amazon S3 Amazon S3 (Simple Storage Service) là dịch vụ lưu trữ đối tượng của AWS, cung cấp khả năng lưu trữ và truy xuất dữ liệu với dung lượng không giới hạn. Đối với game, S3 là nơi lý tưởng để lưu trữ các asset động như hình ảnh, âm thanh, video, mô hình 3D, hoặc các gói cập nhật nội dung.\nS3 cho phép bạn tải các asset mới lên mà không cần phát hành phiên bản game mới, giúp giảm kích thước ban đầu của game và cải thiện trải nghiệm người dùng. Dịch vụ này cung cấp độ bền cao, tính khả dụng gần như 100%, và khả năng mở rộng không giới hạn.\nVới việc sử dụng Amazon S3, bạn sẽ có được những ưu điểm sau: Lưu trữ và phân phối asset game với độ tin cậy cao Giảm kích thước ứng dụng bằng cách tải asset động khi cần Cập nhật nội dung game mà không cần phát hành phiên bản mới Tích hợp với CloudFront để phân phối nội dung nhanh hơn trên toàn cầu Kiểm soát quyền truy cập chi tiết thông qua IAM và chính sách bucket Chi phí lưu trữ thấp với nhiều lớp lưu trữ khác nhau tùy theo nhu cầu "
},
{
	"uri": "/vi/",
	"title": "Modernizing Mobile Game Backend with AWS Cloud Services",
	"tags": [],
	"description": "",
	"content": "Hiện đại hóa hệ thống backend cho game di động bằng các dịch vụ AWS Tổng quan Trong khuôn khổ workshop này, nhóm chúng tôi trình bày quá trình tích hợp các dịch vụ cốt lõi của AWS vào một dự án game di động thể loại thủ thành, được phát triển trên nền tảng Unity 6. Do Unity 6 đã ngừng hỗ trợ chính thức AWS SDK, chúng tôi xây dựng toàn bộ kiến trúc backend theo hướng serverless và thực hiện giao tiếp với các dịch vụ AWS thông qua REST API được ký bằng AWS Signature Version 4 hoặc xác thực bằng JWT từ Amazon Cognito.\nViệc cấu hình và tích hợp được thực hiện theo từng khối chức năng riêng biệt, đảm bảo hệ thống vừa an toàn, vừa có khả năng mở rộng và dễ dàng kiểm thử độc lập. Toàn bộ quá trình triển khai được thiết kế theo hướng thực chiến – ưu tiên hiệu quả, đơn giản, nhưng vẫn tuân thủ theo các nguyên tắc kiến trúc chuẩn của AWS (Well-Architected Framework).\nNội dung Giới thiệu Xác thực tài khoản Cognito Sử dụng dịch vụ Amazon SES gửi email từ User lên Sever Đẩy dữ liệu từ Unity lên Amazon DynamoDB Sử dụng S3 để tải Asset động cho Game Unity Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/4-pushdatafromunitytodynamodb/3.1-dynamodb/",
	"title": "Tạo bảng dữ liệu trên DynamoDB và cấu hình các phần cần thiết",
	"tags": [],
	"description": "",
	"content": "Tạo bảng dữ liệu trên DynamoDB Truy cập vào giao diện quản trị của dịch vụ DynamoDB chọn Create table.\nThiết lập thông tin bảng.\nNhập tên table mà bạn muốn tạo ở mục đầu tiên Table name. Nhập Partition key đây chính là primary key cho table của bạn bạn có thể chọn kiểu dữ liệu của key ở bên cạnh. Click Create table. Truy cập vào Cognito.\nClick chọn Identity pools. Click chọn Create identity pool. Chọn Authenticated access sau đó chọn những loại đăng nhập mà bạn muốn xác thực sau đó chọn Next. Đặt tên cho IAM role name sau đó chọn Next. Ở đậy chúng ta sẽ chọn User pool ID mà bạn muốn xác thực và chọn App client ID tương ứng sau đó chọn Next. Đặt tên cho Identity pool sau đó bạn có thể chọn Next xem lại các thông tin đã cấu hình và chọn Create identity pool. Tạo Policy cấp quyền cho Cognito tương tác với DynamoDB.\nChọn Create plolicy.\nChuyển sang chỉnh sửa Json và cập nhật lại quyền truy cập vào DynamoDB như sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:GetItem\u0026#34;, \u0026#34;dynamodb:PutItem\u0026#34;, \u0026#34;dynamodb:UpdateItem\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:[Region]:*:table/[Name table]\u0026#34; } ] } Sau đó chọn Next.\nĐặt tên cho Policy và Create policy.\nTruy cập vào giao diện quản trị của dịch vụ IAM\nChọn Roles ở thanh trượt bên trái chọn vào Role mà bạn đã đặt tên lúc tạo Identity pool. Chọn Add permissions sau đó chọn Attach polichies. Tìm tên và chọn Policy mà bạn vừa tạo sau đó chọn Add permissions. Sau đó chọn tab Trust relationships chọn Edit tust policy. Cập nhật lại quyền mới như sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Federated\u0026#34;: \u0026#34;cognito-identity.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:aud\u0026#34;: \u0026#34;[Identity pool ID]\u0026#34; }, \u0026#34;ForAnyValue:StringLike\u0026#34;: { \u0026#34;cognito-identity.amazonaws.com:amr\u0026#34;: \u0026#34;authenticated\u0026#34; } } } ] } "
},
{
	"uri": "/vi/5-s3withunity/4.1-creates3/",
	"title": "Tạo S3 Bucket cho Asset Game",
	"tags": [],
	"description": "",
	"content": "Truy cập vào Amazon S3 Truy cập vào trang S3 Nhấn vào nút Create bucket Cấu hình bucket Thông tin cơ bản:\nBucket name: Nhập tên bucket của bạn (ví dụ: mygame-assets) Object Ownership: Giữ mặc định \u0026ldquo;ACLs disabled\u0026rdquo;\nBlock Public Access settings: Mặc định, S3 sẽ chặn tất cả quyền truy cập công khai. Để cho phép asset được tải từ game, bỏ chọn \u0026ldquo;Block all public access\u0026rdquo;\nNhấn Create bucket\nCấu hình CORS (Cross-Origin Resource Sharing) CORS cho phép game Unity của bạn tải asset từ S3 bucket:\nChọn bucket vừa tạo\nChọn tab Permissions\nCuộn xuống phần Cross-origin resource sharing (CORS)\nNhấn Edit\nNhập cấu hình CORS sau:\n[ { \u0026#34;AllowedHeaders\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;AllowedMethods\u0026#34;: [ \u0026#34;GET\u0026#34;, \u0026#34;HEAD\u0026#34; ], \u0026#34;AllowedOrigins\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;ExposeHeaders\u0026#34;: [] } ] Nhấn Save changes\nTạo chính sách bucket (Bucket Policy) Để cho phép truy cập công khai vào asset:\nVẫn trong tab Permissions, cuộn đến phần Bucket policy\nNhấn Edit\nNhập chính sách sau (thay mygame-assets bằng tên bucket của bạn):\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadForGetBucketObjects\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::mygame-assets/*\u0026#34; } ] } Nhấn Save changes\nTải asset lên S3 Quay lại tab Objects Nhấn Create folder để tạo cấu trúc thư mục (ví dụ: textures, models, audio, bundles) Để tải asset lên: Chọn thư mục đích Nhấn Upload Chọn file từ máy tính của bạn Nhấn Upload Lấy URL của asset Sau khi tải lên, bạn có thể lấy URL của asset để sử dụng trong Unity:\nChọn asset đã tải lên Chọn đến file mà bạn đã upload sẽ hiển thị Object URL URL này có dạng: https://mygame-assets.s3.amazonaws.com/textures/character.png Lưu ý bảo mật Cấu hình trên cho phép bất kỳ ai cũng có thể truy cập asset của bạn. Trong môi trường sản xuất, bạn nên:\nSử dụng CloudFront với OAI (Origin Access Identity) để hạn chế truy cập trực tiếp vào S3 Sử dụng Signed URLs hoặc Cookies để kiểm soát quyền truy cập Cân nhắc sử dụng AWS WAF để bảo vệ khỏi các cuộc tấn công "
},
{
	"uri": "/vi/2-prerequiste-copy/2.1-createuserpool/",
	"title": "Tạo user pool",
	"tags": [],
	"description": "",
	"content": " Mở Amazon Cognito cosole\nChọn User pools trên menu bên trái. Nhấp vào Create user pool. tại trang Set up resources for your application\nỞ phần Define your application chọn Mobile app Dưới phần Configure options chọn Emai, Username Ở dưới Required attributes for sign-up chọn Email Cuối cùng ấn Create User Directory Quay trở lại Amazon Cognito cosole click vào user pool mới tạo Ở bên trái phần Application click vào app client Ở App clients and analytics chọn vào cái app clients name mới tạo trong App client chọn vào edit Ở trong Edit app client information chọn vào các mục sau\nChoice-based sign-in: ALLOW_USER_AUTH Sign in with username and password: ALLOW_USER_PASSWORD_AUTH Get new user tokens from existing authenticated sessions: ALLOW_REFRESH_TOKEN_AUTH rồi kéo xuống cuối chọn Save Change vậy là hoàn thành bước tạo User Pool\n"
},
{
	"uri": "/vi/3-ses_authentication/4.2-lambda-configuration/",
	"title": "Cấu hình Lambda",
	"tags": [],
	"description": "",
	"content": " Mở Lambda. trong phần Dashboard nhấn vào Create function Trong trang Create function làm các bước sau:\nở mục Function name thì ghi tên mà mình muốn đặt Ở dưới phần Runtime thì chọn ngôn ngữ để viết code sử lý gửi email. Như ở trong bài thì chọn Python 3.12 Ở phần Permissions ta tích vào Create a new role with basic Lambda permissions sau khi làm xong các bước trên kéo xuống cuối và chọn Create function Sau khi tạo xong Lambda kéo xuống dưới, ở phần code thì dán đoạn code này vô. Sau khi thêm vô thì nhấn vào nút deploy ở bên trái\nimport boto3\nimport json\nses = boto3.client(\u0026lsquo;ses\u0026rsquo;, region_name=\u0026lsquo;ap-southeast-2\u0026rsquo;)\ndef lambda_handler(event, context):\nbody = json.loads(event['body'])\rsender = \u0026quot;minhallk.vk@gmail.com\u0026quot; # Email đã xác minh\rto_email = \u0026quot;minhallk.vk@gmail.com\u0026quot; # Email nhận feedback\rsubject = body.get(\u0026quot;subject\u0026quot;, \u0026quot;Phản hồi từ người dùng\u0026quot;)\rmessage = body.get(\u0026quot;message\u0026quot;, \u0026quot;Không có nội dung\u0026quot;)\ruser_email = body.get(\u0026quot;user_email\u0026quot;, \u0026quot;Không cung cấp\u0026quot;)\r# Gửi email bằng SES\rresponse = ses.send_email(\rSource=sender,\rDestination={\r'ToAddresses': [to_email]\r},\rMessage={\r'Subject': {\r'Data': subject\r},\r'Body': {\r'Text': {\r'Data': f\u0026quot;Từ: {user_email}\\n\\nNội dung:\\n{message}\u0026quot;\r}\r}\r}\r)\rreturn {\r'statusCode': 200,\r'body': json.dumps({'message': 'Gửi feedback thành công!'})\r}\rTiếp theo ta sẽ cấp quyền SES cho Lambda Vào Configuration nhấn vào Permissions Bấm vào tên Role dưới dòng Execution role Bấm Add permissions rồi ấn thêm Attach policies Tìm AmazonSESFullAccess tích vào nó rồi ấn Add permissions Như thế là đã cấu hình xong Lambda, tiếp theo là cấu hình API GateWay\n"
},
{
	"uri": "/vi/2-prerequiste-copy/2.2-check_connection_to_unity/",
	"title": "kiểm tra kết nối đến unity",
	"tags": [],
	"description": "",
	"content": " Vào tài khoản mình mới tạo trong user pool, ở mục Overview copy ap-southeast-2 Trong phần app client user copy cái Client ID Vào trong project của mình, vào đoạn code sử lý trang Register và Confirm tạo ra 2 biến clientId và region. Gán cái client ID và region trong User pool của mình vô trong. Nhập thông tin của bạn vào và ấn register Sau khi Register thành công thì email sẽ gửi cho bạn 1 đoạn mã xác nhận, copy đoạn mã đó Quay lại vào phần Verify Email\nNhập mã Confirmation bạn đã ghi lại. Nhấp vào nút Submit Quay lại Amazon Cognito vào phần User trong User User Management Ấn vào user vừa mới tạo, kéo xuống phần User attributes sẽ thấy thông tin của mình "
},
{
	"uri": "/vi/5-s3withunity/4.2-s3unity/",
	"title": "Tải Asset Động từ S3",
	"tags": [],
	"description": "",
	"content": "Tải Asset Động từ Amazon S3 vào Unity Trong phần này, chúng ta sẽ tìm hiểu cách tải các asset động (như hình ảnh, âm thanh, mô hình 3D) từ Amazon S3 vào game Unity của bạn bằng cách sử dụng URL của S3.\n1. Chuẩn bị Trước khi bắt đầu, hãy đảm bảo bạn đã:\nTạo bucket S3 và cấu hình như trong phần trước Tải các asset lên bucket S3 của bạn Đảm bảo các asset có thể truy cập công khai hoặc có cấu hình CORS phù hợp 2. Tạo Script Tải Asset từ S3 bằng URL Trong Unity, chúng ta sẽ tạo một script đơn giản để tải asset từ S3 bằng cách sử dụng URL trực tiếp:\nusing UnityEngine; using System.Collections; using UnityEngine.Networking; public class S3AssetLoader : MonoBehaviour { // URL của asset trên S3 public string assetUrl = \u0026#34;https://your-bucket-name.s3.amazonaws.com/path-to-your-asset.png\u0026#34;; // Tham chiếu đến các component sẽ sử dụng asset public UnityEngine.UI.RawImage imageDisplay; public AudioSource audioSource; void Start() { // Tự động tải asset khi khởi động StartCoroutine(LoadAssetFromS3()); } // Hàm để tải asset từ URL public IEnumerator LoadAssetFromS3() { Debug.Log(\u0026#34;Bắt đầu tải asset từ: \u0026#34; + assetUrl); // Xác định loại asset từ URL if (assetUrl.EndsWith(\u0026#34;.png\u0026#34;) || assetUrl.EndsWith(\u0026#34;.jpg\u0026#34;) || assetUrl.EndsWith(\u0026#34;.jpeg\u0026#34;)) { yield return StartCoroutine(LoadImageFromUrl(assetUrl)); } else if (assetUrl.EndsWith(\u0026#34;.mp3\u0026#34;) || assetUrl.EndsWith(\u0026#34;.wav\u0026#34;) || assetUrl.EndsWith(\u0026#34;.ogg\u0026#34;)) { yield return StartCoroutine(LoadAudioFromUrl(assetUrl)); } else { Debug.LogError(\u0026#34;Định dạng file không được hỗ trợ!\u0026#34;); } } // Tải hình ảnh từ URL private IEnumerator LoadImageFromUrl(string url) { using (UnityWebRequest www = UnityWebRequestTexture.GetTexture(url)) { yield return www.SendWebRequest(); if (www.result == UnityWebRequest.Result.Success) { Texture2D texture = DownloadHandlerTexture.GetContent(www); // Hiển thị hình ảnh nếu có component RawImage if (imageDisplay != null) { imageDisplay.texture = texture; Debug.Log(\u0026#34;Đã tải và hiển thị hình ảnh thành công!\u0026#34;); } else { Debug.Log(\u0026#34;Đã tải hình ảnh thành công, nhưng không có RawImage để hiển thị!\u0026#34;); } } else { Debug.LogError(\u0026#34;Lỗi khi tải hình ảnh: \u0026#34; + www.error); } } } // Tải âm thanh từ URL private IEnumerator LoadAudioFromUrl(string url) { // Xác định loại audio từ URL AudioType audioType = AudioType.UNKNOWN; if (url.EndsWith(\u0026#34;.mp3\u0026#34;)) audioType = AudioType.MPEG; else if (url.EndsWith(\u0026#34;.wav\u0026#34;)) audioType = AudioType.WAV; else if (url.EndsWith(\u0026#34;.ogg\u0026#34;)) audioType = AudioType.OGGVORBIS; using (UnityWebRequest www = UnityWebRequestMultimedia.GetAudioClip(url, audioType)) { yield return www.SendWebRequest(); if (www.result == UnityWebRequest.Result.Success) { AudioClip clip = DownloadHandlerAudioClip.GetContent(www); // Phát âm thanh nếu có AudioSource if (audioSource != null) { audioSource.clip = clip; audioSource.Play(); Debug.Log(\u0026#34;Đã tải và phát âm thanh thành công!\u0026#34;); } else { Debug.Log(\u0026#34;Đã tải âm thanh thành công, nhưng không có AudioSource để phát!\u0026#34;); } } else { Debug.LogError(\u0026#34;Lỗi khi tải âm thanh: \u0026#34; + www.error); } } } // Hàm để tải asset theo yêu cầu (có thể gọi từ button) public void LoadAssetOnDemand(string url) { assetUrl = url; StartCoroutine(LoadAssetFromS3()); } } 3. Sử dụng Script trong Unity Bước 1: Tạo GameObject và gắn Script Trong Unity, tạo một GameObject mới (GameObject \u0026gt; Create Empty) Đặt tên là \u0026ldquo;S3AssetManager\u0026rdquo; Thêm component S3AssetLoader vào GameObject (Add Component \u0026gt; Scripts \u0026gt; S3AssetLoader) Bước 2: Thiết lập URL và tham chiếu Trong Inspector, nhập URL của asset trên S3 vào trường \u0026ldquo;Asset Url\u0026rdquo; Ví dụ: https://your-bucket-name.s3.amazonaws.com/images/character.png Kéo các component cần thiết vào các trường tương ứng: Kéo một GameObject có component RawImage vào trường \u0026ldquo;Image Display\u0026rdquo; để hiển thị hình ảnh Kéo một GameObject có component AudioSource vào trường \u0026ldquo;Audio Source\u0026rdquo; để phát âm thanh Bước 3: Tạo UI để tải asset theo yêu cầu using UnityEngine; using UnityEngine.UI; public class AssetLoadButton : MonoBehaviour { public S3AssetLoader assetLoader; public InputField urlInput; public void LoadAssetFromInput() { if (urlInput != null \u0026amp;\u0026amp; !string.IsNullOrEmpty(urlInput.text)) { assetLoader.LoadAssetOnDemand(urlInput.text); } else { Debug.LogError(\u0026#34;URL không hợp lệ hoặc trống!\u0026#34;); } } } 4. Lưu ý bảo mật Không lưu trữ thông tin nhạy cảm: Không nhúng AWS credentials vào code Unity Sử dụng backend làm trung gian: Tốt nhất là sử dụng backend server để tạo pre-signed URL Giới hạn quyền truy cập: Chỉ cho phép truy cập đến các asset cần thiết 5. Kết luận Với hướng dẫn này, bạn có thể dễ dàng tải các asset động từ Amazon S3 vào game Unity của mình bằng cách sử dụng URL. Điều này cho phép bạn:\nCập nhật nội dung game mà không cần phát hành phiên bản mới Giảm kích thước ứng dụng ban đầu Tăng tính linh hoạt trong việc quản lý nội dung Hãy thử nghiệm với các loại asset khác nhau và tối ưu hóa quá trình tải để có trải nghiệm người dùng tốt nhất!\n"
},
{
	"uri": "/vi/4-pushdatafromunitytodynamodb/3.2-lambda/",
	"title": "Tạo lambda để tương tác với DynamoDB",
	"tags": [],
	"description": "",
	"content": "Tạo Lambda Truy cập vào giao diện của dịch vụ Lambda chọn Create a function.\nThiết lập function cho Lambda.\nNhập tên function của bạn Function name. Ở Runtime bạn có thể chọn ngôn ngữ lập trình mà bạn muốn sử dụng. Chọn Create function Cấu hình Permissions cho Role của Lambda Truy cập vào function của Lambda.\nCần chỉnh region đúng với region lúc tạo function\nBạn sẽ thấy function mà chúng ta vừa tạo chọn vào function đó. Chọn Configuration sau đó chọn vào Permissions bạn sẽ thấy role của function chọn vào role đó để chuyển nhanh sang trang cấu hình của role đó. Cấu hình cho role của lambda.\nTại trang này chúng ta sẽ thêm policy cho role. Sau đó chúng ta sẽ chọn policy mà chúng ta đã tạo ở phần trước. Sau khi chọn policy kéo xuống cuối trang và chọn Add permissions. Viết code Lambda để tương tác với DynamoDB Quay lại trang Lambda function của bạn và chọn tab Code.\nTrong phần editor, bạn có thể viết code để tương tác với DynamoDB. Dưới đây là một ví dụ sử dụng Node.js với AWS SDK v3:\n// Import AWS SDK v3 import { DynamoDBClient } from \u0026#34;@aws-sdk/client-dynamodb\u0026#34;; import { DynamoDBDocumentClient, PutCommand, GetCommand } from \u0026#34;@aws-sdk/lib-dynamodb\u0026#34;; // Khởi tạo DynamoDB client const client = new DynamoDBClient({ region: \u0026#34;ap-southeast-2\u0026#34; }); // đảm bảo trùng với region của DynamoDB const docClient = DynamoDBDocumentClient.from(client); export const handler = async (event) =\u0026gt; { console.log(\u0026#39;=== FULL EVENT ===\u0026#39;); console.log(JSON.stringify(event, null, 2)); console.log(\u0026#39;==================\u0026#39;); // Cấu hình headers cho CORS const headers = { \u0026#39;Access-Control-Allow-Origin\u0026#39;: \u0026#39;*\u0026#39;, \u0026#39;Access-Control-Allow-Headers\u0026#39;: \u0026#39;Content-Type, User-Agent\u0026#39;, \u0026#39;Access-Control-Allow-Methods\u0026#39;: \u0026#39;GET, POST, OPTIONS\u0026#39;, \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Cache-Control\u0026#39;: \u0026#39;no-cache\u0026#39; }; try { // Lấy dữ liệu từ event const data = JSON.parse(event.body || \u0026#39;{}\u0026#39;); const { userId, score, level } = data; if (!userId) { return { statusCode: 400, headers, body: JSON.stringify({ message: \u0026#39;userId là bắt buộc\u0026#39; }) }; } // Tham số để lưu vào DynamoDB const params = { TableName: \u0026#39;GameScores\u0026#39;, Item: { userId: userId, timestamp: new Date().toISOString(), score: score || 0, level: level || 1, } }; // Lưu dữ liệu vào DynamoDB sử dụng PutCommand const command = new PutCommand(params); await docClient.send(command); // Trả về kết quả thành công return { statusCode: 200, headers, body: JSON.stringify({ message: \u0026#39;Dữ liệu đã được lưu thành công\u0026#39;, data: params.Item }) }; } catch (error) { // Xử lý lỗi console.error(\u0026#39;Lỗi:\u0026#39;, error); return { statusCode: 500, headers, body: JSON.stringify({ message: \u0026#39;Đã xảy ra lỗi khi xử lý yêu cầu\u0026#39;, error: error.message }) }; } }; Sau khi viết xong code, nhấn Deploy để lưu và triển khai function.\nKiểm tra Lambda function Sau khi triển khai function, bạn có thể kiểm tra nó bằng cách tạo một test event.\nNhấn vào nút Test ở phía trên editor.\nTạo một test event mới với dữ liệu JSON như sau:\n{ \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;userId\\\u0026#34;:\\\u0026#34;user123\\\u0026#34;,\\\u0026#34;score\\\u0026#34;:100,\\\u0026#34;level\\\u0026#34;:5}\u0026#34; } Đặt tên cho test event và nhấn Save.\nNhấn Test để chạy function với test event đã tạo.\nKiểm tra kết quả thực thi và log để đảm bảo function hoạt động đúng.\nĐảm bảo rằng bảng DynamoDB đã được tạo trước khi chạy Lambda function.\n"
},
{
	"uri": "/vi/2-prerequiste-copy/",
	"title": "Xác thực tài khoản bằng Amazon Cognito",
	"tags": [],
	"description": "",
	"content": "\rBạn cần tạo sẵn 1 Linux instance thuộc public subnet và 1 Window instance thuộc private subnet để thực hiện bài thực hành này.\nĐể tìm hiểu cách tạo user pool các bạn có thể tham khảo bài lab :\nXác thực với Amazon Cognito Để sử dụng System Manager để quản lý window instance nói riêng và các instance nói chung của chúng ta trên AWS, ta cần phải cung cấp quyền cho các instance của chúng ta có thể làm việc với System Manager.Trong phần chuẩn bị này, chúng ta cũng sẽ tiến hành tạo IAM Role để cấp quyền cho các instance có thể làm việc với System Manager.\nNội dung Tạo User Pool "
},
{
	"uri": "/vi/3-ses_authentication/4.3-apigateway_configuration/",
	"title": "Cấu hình API GateWay",
	"tags": [],
	"description": "",
	"content": " Mở Amazon API GateWay nhấn vào nút Create an API để để bắt đầu cấu hinh Tiếp theo ta sẽ cấu hình phần Configue API\nTrong phần API name tên đặt tên như ta muốn Dưới phần Integrations ta chọn vào phần Lambda. Trong phần Lambda funtion chọn vào cái Lambda ta mới tạo. sau khi xong ta ấn next để tiếp tục cấu hình. Trong phần Configure routes ở dưới phần Method ta chọn vào phần POST. Sau khi xong ta chọn next Ở bước cuối ta coi lại các bước ta cấu hình xem đã đầy đủ thông tin hay chưa. Sau khi đã kiểm tra ta chọn create để tạo API GateWay Như thế ta đã cấu hình xong API GateWay, giờ ta sẽ bắt đầu tích hợp dịch vụ vào trong game.\n"
},
{
	"uri": "/vi/4-pushdatafromunitytodynamodb/3.3-api-gateway/",
	"title": "Cấu hình API Gateway để sử dụng Lambda tương tác với DynamoDB",
	"tags": [],
	"description": "",
	"content": "Tạo HTTP API Gateway Truy cập vào giao diện của dịch vụ API Gateway và chọn Create API.\nChọn HTTP API và nhấn Build.\nỞ màn hình tạo API:\nĐặt tên cho API của bạn trong trường API name Trong phần Integrations, chọn Add integration Chọn Lambda làm loại tích hợp Chọn Lambda function đã tạo ở bước trước Ở phần API endpoint type, chọn Regional Ở phần CORS, để mặc định hoặc bật tùy theo nhu cầu của bạn Nhấn Next Cấu hình Routes (Tuyến đường) Ở màn hình Configure routes:\nChọn phương thức POST Nhập đường dẫn /scores Chọn Lambda function của bạn làm integration target (Mặc định sẽ là Lambda function mà bạn đã chọn ở bước trên) Nhấn Next Cấu hình Stage Ở màn hình Configure stages:\nGiữ stage mặc định $default Bạn có thể thêm các stage khác nếu cần Nhấn Next Xem lại các thiết lập và nhấn Create.\nCORS (Cross-Origin Resource Sharing) Một trong những ưu điểm của HTTP API là nó đã hỗ trợ CORS mặc định. Khi tạo API, bạn có thể đã cấu hình CORS trong quá trình tạo. Nếu cần điều chỉnh thêm:\nChọn API của bạn và chọn tab CORS.\nỞ đây bạn có thể cấu hình:\nAccess-Control-Allow-Origins: Mặc định là \u0026lsquo;*\u0026rsquo; (cho phép tất cả các nguồn) Access-Control-Allow-Headers: Mặc định đã bao gồm \u0026lsquo;Content-Type,Authorization\u0026rsquo; Access-Control-Allow-Methods: Mặc định đã bao gồm các phương thức cơ bản Với ứng dụng Unity, CORS thường không phải là vấn đề lớn vì các yêu cầu không được gọi từ trình duyệt web. Tuy nhiên, cấu hình CORS vẫn hữu ích nếu bạn cũng sử dụng API này cho các ứng dụng web.\nLấy URL của API Chọn tab Stages và bạn sẽ thấy URL của API của bạn trong phần Invoke URL.\nURL này sẽ có dạng: https://api-id.execute-api.ap-southeast-2.amazonaws.com\nĐể gọi API của bạn, bạn sẽ sử dụng URL này kết hợp với đường dẫn đã định nghĩa (ví dụ: https://api-id.execute-api.ap-southeast-2.amazonaws.com/scores)\nKiểm tra API Bạn có thể sử dụng công cụ như Postman hoặc curl để kiểm tra API của bạn.\nVí dụ sử dụng curl:\ncurl -X POST \\ https://your-api-id.execute-api.ap-southeast-2.amazonaws.com/scores \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;userId\u0026#34;: \u0026#34;user123\u0026#34;, \u0026#34;score\u0026#34;: 100, \u0026#34;level\u0026#34;: 5 }\u0026#39; Hoặc bạn có thể sử dụng một đoạn code JavaScript đơn giản để gọi API:\nfetch(\u0026#39;https://your-api-id.execute-api.ap-southeast-2.amazonaws.com/scores\u0026#39;, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, }, body: JSON.stringify({ userId: \u0026#39;user123\u0026#39;, score: 100, level: 5 }), }) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; console.log(data)) .catch(error =\u0026gt; console.error(\u0026#39;Error:\u0026#39;, error)); Sử dụng API trong Unity Bạn có thể sử dụng UnityWebRequest để gọi API từ game Unity của bạn:\nusing System.Collections; using System.Text; using UnityEngine; using UnityEngine.Networking; public class ApiClient : MonoBehaviour { private readonly string apiUrl = \u0026#34;https://your-api-id.execute-api.ap-southeast-2.amazonaws.com/scores\u0026#34;; public void SaveScore(string userId, int score, int level) { StartCoroutine(PostScore(userId, score, level)); } private IEnumerator PostScore(string userId, int score, int level) { // Tạo JSON data string jsonData = JsonUtility.ToJson(new ScoreData { userId = userId, score = score, level = level }); // Tạo request UnityWebRequest request = new UnityWebRequest(apiUrl, \u0026#34;POST\u0026#34;); byte[] bodyRaw = Encoding.UTF8.GetBytes(jsonData); request.uploadHandler = new UploadHandlerRaw(bodyRaw); request.downloadHandler = new DownloadHandlerBuffer(); request.SetRequestHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;); // Gửi request yield return request.SendWebRequest(); if (request.result == UnityWebRequest.Result.Success) { Debug.Log(\u0026#34;Score saved successfully: \u0026#34; + request.downloadHandler.text); } else { Debug.LogError(\u0026#34;Error saving score: \u0026#34; + request.error); } } } [System.Serializable] public class ScoreData { public string userId; public int score; public int level; } Kết luận Bây giờ bạn đã có một HTTP API hoàn chỉnh để lưu trữ dữ liệu game vào DynamoDB thông qua Lambda function. API này được tối ưu hóa cho ứng dụng di động và game Unity, với độ trễ thấp và hiệu suất cao.\nKhi sử dụng API trong môi trường sản xuất, bạn nên cân nhắc việc thêm xác thực và giới hạn tốc độ để bảo vệ API của bạn.\n"
},
{
	"uri": "/vi/2-prerequiste-copy/2.3-clear/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": " Mở Amazon Cognito cosole\nChọn User pools trên menu bên trái. Chọn User pool - … vừa tạo trước đó. Nhấp vào nút Delete. Tại popup Delete user pool “User pool - …”?.\nChọn Delete Cognito domain … và Deactivate deletion protection. Nhập User pool - \u0026hellip; vào trường 2. To confirm deletion. Nhấp vào nút Delete "
},
{
	"uri": "/vi/3-ses_authentication/",
	"title": "Sử dụng dịch vụ Amazon SES gửi email từ User lên Sever",
	"tags": [],
	"description": "",
	"content": "Trong bài thực hành này mình sẽ thực hành sử dụng dịch vụ Amazon SES để gửi feeback từ user về email của nhà phát hành game trong Unity. Vì Amazon SES không hỗ trợ kết nối trực tiếp đến Unity nên minh sẽ sử dụng API Gateway và Lambda để hỗ trợ kết nối\nNội dung Cấu hình Amazon SES Cấu hình Lambda Cấu hình API GateWay Thiết lập kết nối vào Unity Dọn dẹp "
},
{
	"uri": "/vi/4-pushdatafromunitytodynamodb/",
	"title": "Đẩy dữ liệu từ Unity lên Amazon DynamoDB",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ xây dựng quy trình cho phép client game Unity 6 gửi dữ liệu game (ví dụ: team tháp, cấp độ, tiến trình) lên Amazon DynamoDB, thông qua API Gateway và AWS Lambda, với lớp xác thực bảo mật sử dụng Amazon Cognito.\nDo Unity 6 không hỗ trợ AWS SDK, tất cả tương tác với backend được thực hiện bằng HTTP request thông qua UnityWebRequest. Vì vậy, tính bảo mật và kiểm soát truy cập phải được thực hiện nghiêm ngặt từ phía API.\nTrước khi có thể gửi và lưu dữ liệu, bạn cần cấu hình các dịch vụ backend, cấu hình User Pool (Amazon Cognito) ở phần trước đây là nơi quản lý người dùng, cung cấp JWT để xác thực với API Gateway.\nNội dung Tạo bảng dữ liệu trên DynamoDB và cấu hình các phần cần thiết Tạo Lambda function để tương tác với DynamoDB Cấu hình API Gateway để sử dụng Lambda Function "
},
{
	"uri": "/vi/3-ses_authentication/4.4-setup_connection_in_unity/",
	"title": "Kết nối vào Unity",
	"tags": [],
	"description": "",
	"content": " Mở lại phần API GateWay vào lại cái API mình mới tạo.\nỞ bên phải dưới phần Deploy ta chọn vào Stages Trong phần Stages tích vào cái $default để mở bảng Stages Detail trong phần Stages Detail copy cái URL. Mở lại Lambda kéo xuống phần code tìm 2 mục sender và to_email ghi email của mình vào đó. Vào trong game tạo 1 cái feedback đơn giản để test thử. Đăng nhập bằng 1 tài khoản khác của mình.\nTạo 1 scrip để sử lý feedback Dán cái URL copy ở API GateWay vào trong đoạn code\nsau khi thiết lập xong thì mình test thử Sau khi đã gửi feedback thì vào trong email chính của chúng ta xem đã có feedback trả về hay chưa Vậy là chúng ta đã thành công sử dụng dịch vụ SES để gửi feedback từ unity về email "
},
{
	"uri": "/vi/3-ses_authentication/4.5-clear/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": " Mở Amazon SES\nChọn vào cái Identities mình đã tạo trước đó. Sau khi ấn vào thì nhấn nút delete sau khi nhấn thì hiện lên hộp thoại Delete Identity nhấn Confirm Mở Lambda\nChọn vào cái Funtion mình muốn xóa, ở phần Action nhấn vào Delete Sau khi nhấn hiện lên hộp thoại Delete Funtion thì nhập vào Confirm rồi nhấn Delete Mở Amazon API GateWay\nChọn vào cái API mình muốn xóa, nhấn vào Delete Sau khi nhấn hiện lên hộp thoại Delete API thì nhập vào Confirm rồi nhấn Delete "
},
{
	"uri": "/vi/5-s3withunity/",
	"title": "Sử dụng S3 để tải Asset động cho Game Unity",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Amazon S3 (Simple Storage Service) là giải pháp lưu trữ đám mây lý tưởng để quản lý và phân phối asset động cho game mobile được phát triển bằng Unity. Việc tải asset động giúp giảm kích thước ban đầu của game, cải thiện thời gian tải và cho phép cập nhật nội dung mà không cần phát hành phiên bản mới.\nTổng quan về Workshop Trong workshop này, chúng ta sẽ tìm hiểu:\nCách thiết lập bucket S3 để lưu trữ asset game Tích hợp tải asset động vào game Unity "
},
{
	"uri": "/vi/6-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "1. Xóa bảng DynamoDB Truy cập AWS Management Console và làm theo các bước sau:\nĐiều hướng đến dịch vụ DynamoDB và truy cập DynamoDB Console Trong thanh điều hướng bên trái, chọn Tables (Bảng) Tìm và chọn bảng bạn muốn xóa từ danh sách Nhấp vào nút Delete (Xóa) ở góc trên bên phải Trong hộp thoại xác nhận, nhập confirm và chọn Delete table (Xóa bảng) 2. Xóa Bucket S3 Truy cập S3 Console và thực hiện các bước sau:\nTìm bucket bạn muốn xóa Chọn bucket và nhấp vào nút Empty (Làm trống) Nhập permanently delete để xác nhận và chọn Empty bucket (Làm trống bucket) Khi bucket đã trống, chọn Delete (Xóa) Xác nhận bằng cách nhập tên bucket và chọn Delete bucket (Xóa bucket) "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]