using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;
using System.IO;
using System;

public class S3AssetManager : MonoBehaviour
{
    public static S3AssetManager Instance;
    
    [Header("S3 Settings")]
    [SerializeField] private string s3BaseUrl = "https://aetheric-game-assets.s3.ap-southeast-2.amazonaws.com";
    [SerializeField] private int maxCacheSizeMB = 100;
    
    private Dictionary<string, Sprite> spriteCache = new Dictionary<string, Sprite>();
    private Dictionary<string, AudioClip> audioCache = new Dictionary<string, AudioClip>();
    
    [Header("Cache Settings")]
    [SerializeField] private bool autoCacheCleanup = true;
    [SerializeField] private bool cleanupUnusedEvents = true; // X√≥a assets c·ªßa c√°c event kh√¥ng c√≤n active
    
    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
            
            // Ki·ªÉm tra cache size v√† x√≥a n·∫øu c·∫ßn
            if (autoCacheCleanup)
            {
                StartCoroutine(CleanupOldCache());
            }
        }
        else
        {
            Destroy(gameObject);
        }
    }
    
    #region Sprite Loading
    
    public void LoadSprite(string spritePath, System.Action<Sprite> callback)
    {
        StartCoroutine(LoadSpriteCoroutine(spritePath, callback));
    }
    
    private IEnumerator LoadSpriteCoroutine(string spritePath, System.Action<Sprite> callback)
    {
        // Check memory cache first
        if (spriteCache.TryGetValue(spritePath, out Sprite cachedSprite))
        {
            callback?.Invoke(cachedSprite);
            yield break;
        }
        
        // Check disk cache
        string cacheKey = "sprite_" + spritePath.GetHashCode();
        if (PlayerPrefs.HasKey(cacheKey))
        {
            string cachedPath = PlayerPrefs.GetString(cacheKey);
            if (File.Exists(cachedPath))
            {
                yield return StartCoroutine(LoadSpriteFromDisk(cachedPath, (loadedSprite) => {
                    if (loadedSprite != null)
                    {
                        spriteCache[spritePath] = loadedSprite;
                        callback?.Invoke(loadedSprite);
                    }
                    else
                    {
                        StartCoroutine(DownloadSprite(spritePath, callback));
                    }
                }));
                yield break;
            }
        }
        
        // Download from S3
        yield return StartCoroutine(DownloadSprite(spritePath, callback));
    }
    
    private IEnumerator DownloadSprite(string spritePath, System.Action<Sprite> callback)
    {
        string url = s3BaseUrl + spritePath;
        Debug.Log($"üîÑ Downloading sprite: {url}");
        
        UnityWebRequest request = UnityWebRequestTexture.GetTexture(url);
        request.timeout = 10;
        
        yield return request.SendWebRequest();
        
        if (request.result == UnityWebRequest.Result.Success)
        {
            Texture2D texture = ((DownloadHandlerTexture)request.downloadHandler).texture;
            
            // Create sprite
            Sprite sprite = Sprite.Create(
                texture, 
                new Rect(0, 0, texture.width, texture.height), 
                Vector2.one * 0.5f
            );
            
            // Cache in memory
            spriteCache[spritePath] = sprite;
            
            // Cache to disk
            StartCoroutine(CacheTextureToDisk(texture, spritePath));
            
            callback?.Invoke(sprite);
            Debug.Log($"‚úÖ Sprite downloaded: {spritePath}");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è Failed to download sprite: {request.error}");
            callback?.Invoke(null);
        }
        
        request.Dispose();
    }
    
    private IEnumerator LoadSpriteFromDisk(string path, System.Action<Sprite> callback)
    {
        Debug.Log($"üìÇ Loading sprite from cache: {path}");
        
        try
        {
            byte[] fileData = File.ReadAllBytes(path);
            Texture2D texture = new Texture2D(2, 2);
            texture.LoadImage(fileData);
            
            Sprite sprite = Sprite.Create(
                texture, 
                new Rect(0, 0, texture.width, texture.height), 
                Vector2.one * 0.5f
            );
            
            callback?.Invoke(sprite);
            Debug.Log("‚úÖ Cached sprite loaded successfully!");
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå Failed to load cached sprite: {e.Message}");
            callback?.Invoke(null);
        }
        
        yield return null;
    }
    
    private IEnumerator CacheTextureToDisk(Texture2D texture, string spritePath)
    {
        try
        {
            string filename = "sprite_" + spritePath.GetHashCode() + ".png";
            string path = Path.Combine(Application.persistentDataPath, filename);
            
            byte[] pngData = texture.EncodeToPNG();
            File.WriteAllBytes(path, pngData);
            
            string cacheKey = "sprite_" + spritePath.GetHashCode();
            PlayerPrefs.SetString(cacheKey, path);
            PlayerPrefs.Save();
            
            Debug.Log($"üíæ Sprite cached to: {path}");
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå Failed to cache texture: {e.Message}");
        }
        
        yield return null;
    }
    
    #endregion
    
    #region Audio Loading
    
    public void LoadAudio(string audioPath, System.Action<AudioClip> callback)
    {
        StartCoroutine(LoadAudioCoroutine(audioPath, callback));
    }
    
    private IEnumerator LoadAudioCoroutine(string audioPath, System.Action<AudioClip> callback)
    {
        // Check memory cache first
        if (audioCache.TryGetValue(audioPath, out AudioClip cachedClip))
        {
            callback?.Invoke(cachedClip);
            yield break;
        }
        
        // Check disk cache
        string cacheKey = "audio_" + audioPath.GetHashCode();
        if (PlayerPrefs.HasKey(cacheKey))
        {
            string cachedPath = PlayerPrefs.GetString(cacheKey);
            if (File.Exists(cachedPath))
            {
                // Update timestamp
                PlayerPrefs.SetString(cacheKey + "_timestamp", DateTime.Now.ToString("o"));
                PlayerPrefs.Save();
                
                // Load from disk cache
                // Note: Unity doesn't support loading AudioClip from file directly
                // We'll still need to download it, but we'll update the timestamp
            }
        }
        
        // Download from S3
        string url = s3BaseUrl + audioPath;
        Debug.Log($"üîÑ Downloading audio: {url}");
        
        AudioType audioType = audioPath.EndsWith(".mp3") ? AudioType.MPEG : 
                             audioPath.EndsWith(".ogg") ? AudioType.OGGVORBIS : 
                             audioPath.EndsWith(".wav") ? AudioType.WAV : AudioType.UNKNOWN;
        
        UnityWebRequest request = UnityWebRequestMultimedia.GetAudioClip(url, audioType);
        request.timeout = 30; // Audio c√≥ th·ªÉ l·ªõn h∆°n
        
        yield return request.SendWebRequest();
        
        if (request.result == UnityWebRequest.Result.Success)
        {
            AudioClip clip = DownloadHandlerAudioClip.GetContent(request);
            
            // Cache in memory
            audioCache[audioPath] = clip;
            
            // Cache to disk (just save the timestamp for tracking)
            string filename = "audio_" + audioPath.GetHashCode() + ".bytes";
            string path = Path.Combine(Application.persistentDataPath, filename);
            
            try
            {
                // Create empty file as a marker
                File.WriteAllText(path, "audio_cache");
                
                PlayerPrefs.SetString(cacheKey, path);
                PlayerPrefs.SetString(cacheKey + "_timestamp", DateTime.Now.ToString("o"));
                PlayerPrefs.Save();
                
                Debug.Log($"üíæ Audio cache reference saved: {path}");
            }
            catch (Exception e)
            {
                Debug.LogWarning($"‚ö†Ô∏è Failed to create audio cache reference: {e.Message}");
            }
            
            callback?.Invoke(clip);
            Debug.Log($"‚úÖ Audio downloaded: {audioPath}");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è Failed to download audio: {request.error}");
            callback?.Invoke(null);
        }
        
        request.Dispose();
    }
    
    #endregion
    
    #region Cache Management
    
    public void ClearMemoryCache()
    {
        spriteCache.Clear();
        audioCache.Clear();
        System.GC.Collect();
        Debug.Log("üßπ Memory cache cleared");
    }
    
    public void ClearDiskCache()
    {
        StartCoroutine(ClearDiskCacheCoroutine());
    }
    
    private IEnumerator ClearDiskCacheCoroutine()
    {
        string[] cacheFiles = Directory.GetFiles(Application.persistentDataPath, "sprite_*");
        foreach (string file in cacheFiles)
        {
            try
            {
                File.Delete(file);
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Failed to delete cache file: {e.Message}");
            }
            yield return null;
        }
        
        // X√≥a c√°c file audio cache
        string[] audioFiles = Directory.GetFiles(Application.persistentDataPath, "audio_*");
        foreach (string file in audioFiles)
        {
            try
            {
                File.Delete(file);
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Failed to delete audio cache file: {e.Message}");
            }
            yield return null;
        }
        
        int totalFiles = cacheFiles.Length + audioFiles.Length;
        Debug.Log($"üßπ Disk cache cleared: {totalFiles} files deleted");
    }
    
    // Ki·ªÉm tra v√† x√≥a cache c≈©
    private IEnumerator CleanupOldCache()
    {
        Debug.Log("üîç Checking cache size and age...");
        
        // X√≥a cache c·ªßa c√°c event kh√¥ng c√≤n active
        if (cleanupUnusedEvents && EventManager.Instance != null)
        {
            string currentEvent = EventManager.Instance.GetCurrentEvent();
            yield return StartCoroutine(CleanupUnusedEventAssets(currentEvent));
            
            // N·∫øu ƒë√£ x√≥a cache c·ªßa c√°c event kh√¥ng c√≤n active, th√¨ kh√¥ng c·∫ßn ki·ªÉm tra k√≠ch th∆∞·ªõc n·ªØa
            yield break;
        }
        
        // Ki·ªÉm tra k√≠ch th∆∞·ªõc cache
        long totalSize = 0;
        int filesDeleted = 0;
        
        // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c file cache
        List<CacheFileInfo> cacheFiles = new List<CacheFileInfo>();
        
        // L·∫•y t·∫•t c·∫£ c√°c file cache
        string[] allCacheFiles = Directory.GetFiles(Application.persistentDataPath, "*.*");
        foreach (string file in allCacheFiles)
        {
            // Ch·ªâ x·ª≠ l√Ω c√°c file cache
            if (!file.Contains("sprite_") && !file.Contains("audio_") && !file.Contains("bg_"))
                continue;
                
            try
            {
                FileInfo fileInfo = new FileInfo(file);
                string cacheKey = "";
                
                // X√°c ƒë·ªãnh lo·∫°i cache
                if (file.Contains("sprite_"))
                    cacheKey = "sprite_" + Path.GetFileNameWithoutExtension(file).Replace("sprite_", "");
                else if (file.Contains("audio_"))
                    cacheKey = "audio_" + Path.GetFileNameWithoutExtension(file).Replace("audio_", "");
                else if (file.Contains("bg_"))
                    cacheKey = "bg_cache_" + Path.GetFileNameWithoutExtension(file).Replace("bg_", "");
                
                string timestampStr = PlayerPrefs.GetString(cacheKey + "_timestamp", "");
                DateTime timestamp = string.IsNullOrEmpty(timestampStr) ? 
                    fileInfo.CreationTime : DateTime.Parse(timestampStr);
                    
                cacheFiles.Add(new CacheFileInfo {
                    Path = file,
                    Size = fileInfo.Length,
                    LastAccessed = timestamp,
                    CacheKey = cacheKey
                });
                
                totalSize += fileInfo.Length;
            }
            catch (Exception e)
            {
                Debug.LogWarning($"‚ö†Ô∏è Error processing cache file {file}: {e.Message}");
            }
            
            yield return null;
        }
        
        float totalSizeMB = totalSize / (1024f * 1024f);
        Debug.Log($"üíæ Total cache size: {totalSizeMB:F2} MB ({cacheFiles.Count} files)");
        
        // S·∫Øp x·∫øp theo th·ªùi gian truy c·∫≠p (c≈© nh·∫•t l√™n ƒë·∫ßu)
        cacheFiles.Sort((a, b) => a.LastAccessed.CompareTo(b.LastAccessed));
        
        // X√≥a cache c≈©, cache c·ªßa event kh√¥ng c√≤n active, ho·∫∑c khi v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc
        foreach (var file in cacheFiles)
        {
            // Ki·ªÉm tra file c√≥ thu·ªôc v·ªÅ event n√†o kh√¥ng
            bool isEventAsset = false;
            string fileEvent = "";
            
            // C√°c event ƒë√£ bi·∫øt
            string[] knownEvents = new string[] { "winter", "halloween", "christmas", "summer" };
            string currentEvent = EventManager.Instance != null ? EventManager.Instance.GetCurrentEvent() : "none";
            
            foreach (string eventType in knownEvents)
            {
                if (file.Path.Contains(eventType) && eventType != currentEvent)
                {
                    isEventAsset = true;
                    fileEvent = eventType;
                    break;
                }
            }
            
            // Ki·ªÉm tra tu·ªïi c·ªßa file
            TimeSpan age = DateTime.Now - file.LastAccessed;
            bool isTooOld = age.TotalDays > 30; // 30 ng√†y l√† m·∫∑c ƒë·ªãnh
            
            // Ki·ªÉm tra k√≠ch th∆∞·ªõc cache
            bool needToFreeSpace = totalSizeMB > maxCacheSizeMB;
            
            // X√≥a file n·∫øu:
            // 1. Thu·ªôc v·ªÅ event kh√¥ng c√≤n active
            // 2. Ho·∫∑c qu√° c≈©
            // 3. Ho·∫∑c c·∫ßn gi·∫£i ph√≥ng b·ªô nh·ªõ
            if (isEventAsset || isTooOld || needToFreeSpace)
            {
                try
                {
                    File.Delete(file.Path);
                    totalSize -= file.Size;
                    totalSizeMB = totalSize / (1024f * 1024f);
                    filesDeleted++;
                    
                    // X√≥a PlayerPrefs entry
                    if (!string.IsNullOrEmpty(file.CacheKey))
                    {
                        PlayerPrefs.DeleteKey(file.CacheKey);
                        PlayerPrefs.DeleteKey(file.CacheKey + "_timestamp");
                    }
                    
                    string reason = isEventAsset ? $"unused event asset ({fileEvent})" :
                               isTooOld ? $"too old ({age.TotalDays:F1} days)" : 
                               "cache size limit";
                    Debug.Log($"üóëÔ∏è Deleted cache file: {Path.GetFileName(file.Path)} ({reason})");
                    
                    // N·∫øu ƒë√£ gi·∫£m xu·ªëng d∆∞·ªõi ng∆∞·ª°ng, d·ª´ng x√≥a
                    if (totalSizeMB <= maxCacheSizeMB * 0.8f && !isTooOld)
                        break;
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå Failed to delete cache file {file.Path}: {e.Message}");
                }
            }
            
            yield return null;
        }
        
        if (filesDeleted > 0)
        {
            PlayerPrefs.Save();
            Debug.Log($"üßπ Cache cleanup complete: {filesDeleted} files deleted, {totalSizeMB:F2} MB remaining");
        }
        else
        {
            Debug.Log("‚úÖ Cache is clean, no files deleted");
        }
    }
    
    // Class ƒë·ªÉ l∆∞u th√¥ng tin v·ªÅ file cache
    private class CacheFileInfo
    {
        public string Path;
        public long Size;
        public DateTime LastAccessed;
        public string CacheKey;
    }
    
    // X√≥a cache c·ªßa c√°c event kh√¥ng c√≤n active
    private IEnumerator CleanupUnusedEventAssets(string currentEvent)
    {
        Debug.Log($"üóëÔ∏è Checking for unused event assets (current event: {currentEvent})");
        
        // Danh s√°ch c√°c event
        string[] knownEvents = new string[] { "winter", "halloween", "christmas", "summer" };
        
        // Danh s√°ch c√°c pattern c·∫ßn x√≥a cho m·ªói event
        Dictionary<string, List<string>> eventPatterns = new Dictionary<string, List<string>>();
        
        // T·∫°o patterns cho m·ªói event
        foreach (string eventType in knownEvents)
        {
            if (eventType == currentEvent) continue; // B·ªè qua event hi·ªán t·∫°i
            
            List<string> patterns = new List<string>
            {
                $"fire_{eventType}",
                $"ice_{eventType}",
                $"poison_{eventType}",
                $"rock_{eventType}",
                $"electric_{eventType}",
                $"{eventType}_main",
                $"{eventType}_theme",
                $"{eventType}_background"
            };
            
            eventPatterns[eventType] = patterns;
        }
        
        // L·∫•y t·∫•t c·∫£ c√°c file cache
        string[] allFiles = Directory.GetFiles(Application.persistentDataPath);
        int totalDeleted = 0;
        
        // Ki·ªÉm tra v√† x√≥a c√°c file kh√¥ng c√≤n d√πng
        foreach (string file in allFiles)
        {
            // B·ªè qua c√°c file kh√¥ng ph·∫£i cache
            if (!file.Contains("sprite_") && !file.Contains("audio_") && !file.Contains("bg_"))
                continue;
                
            // Ki·ªÉm tra file c√≥ thu·ªôc event n√†o kh√¥ng
            foreach (var eventEntry in eventPatterns)
            {
                string eventType = eventEntry.Key;
                List<string> patterns = eventEntry.Value;
                
                bool shouldDelete = false;
                foreach (string pattern in patterns)
                {
                    // Ki·ªÉm tra c·∫£ t√™n file v√† hash code
                    if (file.Contains(pattern) || file.Contains(pattern.GetHashCode().ToString()))
                    {
                        shouldDelete = true;
                        break;
                    }
                }
                
                if (shouldDelete)
                {
                    try
                    {
                        // X√≥a file
                        File.Delete(file);
                        totalDeleted++;
                        Debug.Log($"üóëÔ∏è Deleted unused event asset: {Path.GetFileName(file)} (event: {eventType})");
                        
                        // X√≥a PlayerPrefs entry
                        string cacheKey = "";
                        if (file.Contains("sprite_"))
                            cacheKey = "sprite_" + Path.GetFileNameWithoutExtension(file).Replace("sprite_", "");
                        else if (file.Contains("audio_"))
                            cacheKey = "audio_" + Path.GetFileNameWithoutExtension(file).Replace("audio_", "");
                        else if (file.Contains("bg_"))
                            cacheKey = "bg_cache_" + Path.GetFileNameWithoutExtension(file).Replace("bg_", "");
                            
                        if (!string.IsNullOrEmpty(cacheKey))
                        {
                            PlayerPrefs.DeleteKey(cacheKey);
                            PlayerPrefs.DeleteKey(cacheKey + "_timestamp");
                        }
                        
                        break; // Tho√°t kh·ªèi v√≤ng l·∫∑p eventPatterns sau khi x√≥a
                    }
                    catch (Exception e)
                    {
                        Debug.LogError($"‚ùå Failed to delete file {file}: {e.Message}");
                    }
                    
                    break;
                }
            }
            
            yield return null;
        }
        
        if (totalDeleted > 0)
        {
            PlayerPrefs.Save(); // L∆∞u c√°c thay ƒë·ªïi trong PlayerPrefs
            Debug.Log($"üßπ Total cleaned up: {totalDeleted} files for inactive events");
        }
        else
        {
            Debug.Log("‚úÖ No unused event assets found");
        }
    }
    
    [ContextMenu("Show Cache Files")]
    public void ShowCacheFiles()
    {
        string[] files = Directory.GetFiles(Application.persistentDataPath);
        Debug.Log($"Found {files.Length} cache files:");
        foreach (string file in files)
        {
            Debug.Log(Path.GetFileName(file));
        }
    }
    
    [ContextMenu("Force Cleanup Unused Events")]
    public void ForceCleanupUnusedEvents()
    {
        if (EventManager.Instance != null)
        {
            string currentEvent = EventManager.Instance.GetCurrentEvent();
            StartCoroutine(CleanupUnusedEventAssets(currentEvent));
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è EventManager not found");
        }
    }
    
    #endregion
    
    #region Helper Methods
    
    public string GetFullUrl(string path)
    {
        return s3BaseUrl + path;
    }
    
    #endregion
}